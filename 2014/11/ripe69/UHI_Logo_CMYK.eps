%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: UHI_Logo_CMYK.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Abby Franklin
%%CreationDate: 25/09/2011
%%BoundingBox: 0 0 425 133
%%HiResBoundingBox: 0 0 424.7925 132.2524
%%CropBox: 0 0 424.7925 132.2524
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">UHI LOGO OUTLINED</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2011-08-29T10:20:09+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2011-08-29T10:20:09+01:00</xmp:ModifyDate>
         <xmp:CreateDate>2011-08-29T10:20:09+01:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>80</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAUAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FUPqGoWWnW&#xA;M9/fTLb2dsjSzzOaKqKKknCASaCQCTQfIf5kfmpr3m3zI97YT3FnpdjUafBEzIUQMP3snA/bc0r4&#xA;bDNriwiI35u1w4BGO/N7/wDkz+aMXnTRPq966r5gsEAvYxQeqnQXCL/lftAdG9iMwdRh4D5ODqMP&#xA;AfJ6LmO47sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;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&#xA;FXYq7FX/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:1C5789603D60E0118791FF0DC3C64F7D</stRef:instanceID>
            <stRef:documentID>uuid:1B5789603D60E0118791FF0DC3C64F7D</stRef:documentID>
            <stRef:originalDocumentID>uuid:1B5789603D60E0118791FF0DC3C64F7D</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:InstanceID>xmp.iid:F77F1174072068118F62B5494B0F09B1</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F77F1174072068118F62B5494B0F09B1</xmpMM:DocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118F62B5494B0F09B1</stEvt:instanceID>
                  <stEvt:when>2011-08-29T10:20:09+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:1B5789603D60E0118791FF0DC3C64F7D</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>419.999859</stDim:w>
            <stDim:h>296.999959</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=44 M=34 Y=30 K=68</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>44.000000</xmpG:cyan>
                           <xmpG:magenta>34.000004</xmpG:magenta>
                           <xmpG:yellow>30.000002</xmpG:yellow>
                           <xmpG:black>68.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=67 M=100 Y=16 K=20</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>66.999992</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>15.999996</xmpG:yellow>
                           <xmpG:black>19.999998</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -132.252 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 132.252 li
424.792 132.252 li
424.792 0 li
cp
clp
[1 0 0 1 0 0 ]ct
67.9854 20.6333 mo
73.9941 13.0972 li
74.4619 12.4902 75.1777 12.1016 75.979 12.1016 cv
76.7788 12.1016 77.4922 12.4888 77.9614 13.0957 cv
77.9614 13.0957 121.405 70.4438 122.159 71.4966 cv
122.913 72.5493 122.303 73.1899 121.613 73.5327 cv
113.715 77.4565 93.5322 70.3921 87.6792 46.978 cv
81.8174 23.5303 75.5161 22.8501 71.7852 22.1924 cv
69.7422 21.8335 68.2681 22.3579 67.752 21.9487 cv
67.2446 21.5464 67.9854 20.6333 67.9854 20.6333 cv
cp
101.109 25.5908 mo
101.5 25.0835 102.101 24.5073 102.771 24.5073 cv
103.44 24.5073 104.038 25.082 104.43 25.5884 cv
116.055 40.1777 li
116.055 40.1777 116.264 40.4404 116.332 40.5752 cv
116.49 40.8647 116.651 41.4058 115.889 41.4946 cv
114.3 41.6787 107.491 40.2842 104.49 36.563 cv
98.7251 28.8032 li
101.109 25.5908 li
cp
75.4541 72.9492 mo
105.715 90.542 119.246 88.3511 133.661 78.5854 cv
133.661 35.271 li
133.661 35.2666 li
133.661 30.9214 li
133.661 29.2017 132.266 27.8062 130.545 27.8062 cv
114.679 27.8062 li
104.394 14.8281 li
103.39 13.8237 101.762 13.8237 100.758 14.8281 cv
94.8481 22.1582 li
77.9507 .834961 li
76.8384 -.27832 75.0356 -.27832 73.9233 .834961 cv
27.4727 58.5762 li
29.1968 58.3096 46.5947 56.1704 75.4541 72.9492 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.67 1 .16 .2 cmyk
f
67.7734 109.815 mo
67.688 109.968 67.521 110.001 67.105 109.835 cv
62.728 108.092 58.1538 106.878 53.7124 106.878 cv
44.313 106.878 36.7744 111.218 36.6201 117.028 cv
36.5903 118.157 36.7783 118.758 36.4878 119.006 cv
36.1782 119.276 35.7358 119.153 35.1558 118.78 cv
33.0117 117.405 32.1982 114.838 32.1982 112.621 cv
32.1982 106.808 38.3057 102.636 47.7056 102.636 cv
55.2754 102.636 64.335 106.363 67.6138 109.406 cv
67.7339 109.52 67.8364 109.703 67.7734 109.815 cv
cp
94.6909 108.881 mo
68.4341 104.628 55.0522 86.8472 33.8813 96.6934 cv
26.9087 100.321 23.2275 106.114 23.2695 112.3 cv
23.334 121.785 29.2983 126.765 39.6758 126.765 cv
130.545 126.765 li
132.266 126.765 133.661 125.373 133.661 123.649 cv
133.664 101.55 li
129.861 104.686 117.662 112.604 94.6909 108.881 cv
cp
f
132.875 88.3335 mo
120.013 96.5059 103.77 95.9111 84.8374 87.5938 cv
71.3438 81.6685 35.3633 57.8208 10.2549 74.9971 cv
3.06299 79.918 -.787598 89.5127 .134766 96.4624 cv
1.04102 103.292 6.13916 109.953 12.6411 112.423 cv
13.876 112.893 14.2949 112.231 13.9629 111.33 cv
7.62988 94.1104 26.02 84.8389 36.0591 83.8633 cv
47.4038 82.7603 57.9692 86.2036 77.3926 94.4658 cv
117.47 111.518 130.211 95.3159 133.676 89.6182 cv
134.372 88.4722 133.876 87.7041 132.875 88.3335 cv
cp
f
154.666 39.563 mo
154.666 43.4429 156.173 45.1182 159.606 45.1182 cv
163.068 45.1182 164.575 43.4429 164.575 39.563 cv
164.575 27.811 li
166.083 27.811 li
166.083 39.8145 li
166.083 42.3545 165.72 43.75 164.826 44.7827 cv
163.654 46.0947 161.588 46.8491 159.076 46.8491 cv
156.145 46.8491 153.884 45.8442 152.879 44.1128 cv
152.321 43.1357 152.098 41.8799 152.098 39.8145 cv
152.098 27.811 li
154.666 27.811 li
154.666 39.563 li
cp
.44 .34 .3 .68 cmyk
f
168.285 33.0029 mo
170.602 33.0029 li
170.602 34.5386 li
173.059 33.2261 174.007 32.8916 175.236 32.8916 cv
177.525 32.8916 178.837 34.4268 178.837 37.1064 cv
178.837 46.5415 li
176.52 46.5415 li
176.52 37.5811 li
176.52 35.5991 175.738 34.7339 173.896 34.7339 cv
172.863 34.7339 172.082 34.9292 170.602 35.627 cv
170.602 46.5415 li
168.285 46.5415 li
168.285 33.0029 li
cp
f
183.859 33.0029 mo
183.859 46.5415 li
181.514 46.5415 li
181.514 33.0029 li
183.859 33.0029 li
cp
183.859 31.1333 mo
181.514 31.1333 li
181.514 29.2905 li
183.859 29.2905 li
183.859 31.1333 li
cp
f
191.926 43.834 mo
196.113 33.1426 li
197.537 33.1426 li
192.177 46.5415 li
190.613 46.5415 li
185.673 33.1426 li
188.102 33.1426 li
191.926 43.834 li
cp
f
206.383 35.5435 mo
205.88 34.6221 205.042 34.1191 203.926 34.1191 cv
201.944 34.1191 200.632 35.5713 200.325 38.0557 cv
206.773 38.0557 li
206.773 36.7437 206.69 36.1577 206.383 35.5435 cv
cp
204.066 46.7925 mo
200.325 46.7925 197.813 44.0293 197.813 39.9819 cv
197.813 35.8223 200.465 32.8916 204.233 32.8916 cv
207.332 32.8916 209.258 34.957 209.258 38.3066 cv
209.258 38.5024 209.258 38.8096 209.229 39.228 cv
200.186 39.228 li
200.186 40.5117 200.27 41.0986 200.521 41.9634 cv
201.163 44.0015 202.754 45.2017 204.848 45.2017 cv
206.243 45.2017 207.332 44.811 209.258 43.5825 cv
209.258 45.1182 li
207.416 46.2905 205.824 46.7925 204.066 46.7925 cv
cp
f
211.266 33.0029 mo
213.471 33.0029 li
213.471 35.627 li
214.56 33.0029 216.876 32.8638 217.128 32.8638 cv
217.742 32.8638 218.133 32.9473 218.831 33.2261 cv
218.831 35.5713 li
218.831 35.5713 218.272 34.9014 216.542 34.9014 cv
215.621 34.9292 214.755 35.5435 213.471 36.9946 cv
213.471 46.5415 li
211.266 46.5415 li
211.266 33.0029 li
cp
f
228.627 35.5991 mo
226.729 34.0078 224.915 34.1191 224.915 34.1191 cv
223.519 34.1191 222.652 34.8457 222.652 36.0459 cv
222.652 37.1626 223.267 37.8047 225.166 38.6694 cv
227.231 39.6187 227.538 39.7861 228.152 40.3721 cv
228.739 40.9028 229.046 41.6846 229.046 42.6333 cv
229.046 45.2295 227.092 46.7925 223.798 46.7925 cv
222.513 46.7925 221.424 46.625 220.225 46.2065 cv
220.225 43.9731 li
220.225 43.9731 221.815 45.0898 223.016 45.4253 cv
224.189 45.7314 225.082 45.481 225.082 45.481 cv
225.193 45.481 li
226.198 45.2017 226.868 44.4199 226.868 43.3315 cv
226.868 42.6895 226.589 42.103 226.058 41.6846 cv
225.612 41.3496 225.305 41.1821 224.021 40.5962 cv
221.174 39.2559 220.447 38.4741 220.447 36.7158 cv
220.447 34.3149 222.263 32.8916 225.36 32.8916 cv
226.644 32.8916 227.511 33.0591 228.627 33.4775 cv
228.627 35.5991 li
cp
f
234.04 33.0029 mo
234.04 46.5415 li
231.696 46.5415 li
231.696 33.0029 li
234.04 33.0029 li
cp
234.04 31.1333 mo
231.696 31.1333 li
231.696 29.2905 li
234.04 29.2905 li
234.04 31.1333 li
cp
f
236.271 33.2822 mo
238.03 33.2822 li
238.03 29.9604 li
240.348 29.9604 li
240.348 33.2822 li
243.726 33.2822 li
243.726 34.5938 li
240.348 34.5938 li
240.348 41.6846 li
240.348 44.0293 240.878 45.2017 242.608 45.2017 cv
243.223 45.2017 243.865 45.1455 244.563 44.978 cv
244.563 46.0117 li
243.083 46.458 242.079 46.625 240.878 46.625 cv
238.756 46.625 238.03 45.0898 238.03 43.3315 cv
238.03 34.5938 li
236.271 34.5938 li
236.271 33.2822 li
cp
f
248.497 49.7798 mo
249.391 48.8027 249.585 48.105 250.367 46.123 cv
245.315 33.1147 li
247.687 33.1147 li
251.567 43.1919 li
255.615 33.1147 li
257.262 33.1147 li
251.427 47.2671 li
250.088 50.5054 248.916 51.8174 247.186 51.8452 cv
246.961 51.8452 246.683 51.8174 246.683 51.8174 cv
246.683 50.3374 li
247.632 50.3936 248.078 50.1704 248.497 49.7798 cv
cp
f
269.374 45.5645 mo
271.691 45.5645 273.226 43.3315 273.226 39.8701 cv
273.226 36.3525 271.691 34.1191 269.317 34.1191 cv
267.029 34.1191 265.521 36.3809 265.521 39.8418 cv
265.521 43.3037 267.057 45.5645 269.374 45.5645 cv
cp
269.374 46.7925 mo
265.577 46.7925 262.898 43.9175 262.898 39.8701 cv
262.898 35.7109 265.549 32.8916 269.429 32.8916 cv
273.142 32.8916 275.85 35.8223 275.85 39.8701 cv
275.85 43.8901 273.142 46.7925 269.374 46.7925 cv
cp
f
280.788 29.5977 mo
280.453 30.2671 280.424 30.7417 280.424 31.8589 cv
280.424 33.0313 li
284.277 33.0313 li
284.277 34.3428 li
280.369 34.3428 li
280.369 46.5415 li
278.08 46.5415 li
278.08 34.3428 li
276.293 34.3428 li
276.293 33.0313 li
278.08 33.0313 li
278.107 31.5791 278.247 30.9658 278.667 29.8765 cv
279.559 27.6436 281.401 26.6387 283.579 26.6387 cv
284.249 26.6387 284.892 26.8062 285.477 27.1411 cv
285.477 28.481 li
285.477 28.481 282.155 26.9175 280.788 29.5977 cv
cp
f
290.5 33.2822 mo
292.258 33.2822 li
292.258 29.9604 li
294.574 29.9604 li
294.574 33.2822 li
297.953 33.2822 li
297.953 34.5938 li
294.574 34.5938 li
294.574 41.6846 li
294.574 44.0293 295.104 45.2017 296.836 45.2017 cv
297.449 45.2017 298.092 45.1455 298.79 44.978 cv
298.79 46.0117 li
297.31 46.458 296.306 46.625 295.104 46.625 cv
292.984 46.625 292.258 45.0898 292.258 43.3315 cv
292.258 34.5938 li
290.5 34.5938 li
290.5 33.2822 li
cp
f
302.78 34.5386 mo
305.096 33.2822 306.212 32.8916 307.385 32.8916 cv
309.674 32.8916 311.013 34.4546 311.013 37.1064 cv
311.013 46.5415 li
308.698 46.5415 li
308.698 37.5811 li
308.698 35.5991 307.888 34.7339 306.017 34.7339 cv
305.013 34.7339 304.203 34.957 302.78 35.627 cv
302.78 46.5415 li
300.463 46.5415 li
300.463 26.7783 li
302.78 26.7783 li
302.78 34.5386 li
cp
f
321.424 35.5435 mo
320.921 34.6221 320.084 34.1191 318.968 34.1191 cv
316.986 34.1191 315.673 35.5713 315.367 38.0557 cv
321.815 38.0557 li
321.815 36.7437 321.731 36.1577 321.424 35.5435 cv
cp
319.107 46.7925 mo
315.367 46.7925 312.855 44.0293 312.855 39.9819 cv
312.855 35.8223 315.506 32.8916 319.274 32.8916 cv
322.374 32.8916 324.299 34.957 324.299 38.3066 cv
324.299 38.5024 324.299 38.8096 324.272 39.228 cv
315.228 39.228 li
315.228 40.5117 315.312 41.0986 315.562 41.9634 cv
316.204 44.0015 317.796 45.2017 319.889 45.2017 cv
321.285 45.2017 322.374 44.811 324.299 43.5825 cv
324.299 45.1182 li
322.458 46.2905 320.866 46.7925 319.107 46.7925 cv
cp
f
164.798 62.6909 mo
155.224 62.6909 li
155.224 71.8467 li
152.711 71.8467 li
152.711 53.144 li
155.224 53.144 li
155.224 61.4067 li
164.798 61.4067 li
164.798 53.144 li
167.311 53.144 li
167.311 71.8467 li
164.798 71.8467 li
164.798 62.6909 li
cp
f
172.584 58.3081 mo
172.584 71.8467 li
170.239 71.8467 li
170.239 58.3081 li
172.584 58.3081 li
cp
172.584 56.438 mo
170.239 56.438 li
170.239 54.5952 li
172.584 54.5952 li
172.584 56.438 li
cp
f
179.98 66.0962 mo
181.627 66.0962 182.716 64.728 182.716 62.6909 cv
182.716 60.5972 181.627 59.2573 179.924 59.2573 cv
178.305 59.2573 177.245 60.6245 177.245 62.6626 cv
177.245 64.728 178.333 66.0962 179.98 66.0962 cv
cp
176.463 73.1865 mo
176.463 74.8892 178.026 76.0615 180.259 76.0615 cv
182.632 76.0615 184.418 74.7773 184.418 73.0464 cv
184.418 71.7905 183.833 71.3438 181.571 70.9248 cv
178.863 70.4229 li
177.217 71.0093 176.463 71.9023 176.463 73.1865 cv
cp
186.122 60.2344 mo
184.335 60.2344 li
184.865 61.0713 185.116 61.853 185.116 62.8022 cv
185.116 65.4541 182.967 67.2124 179.729 67.2124 cv
179.589 67.2124 179.311 67.1846 179.311 67.1846 cv
179.311 67.1846 179.003 67.5757 179.003 68.0225 cv
179.003 68.1899 179.003 68.2173 179.059 68.5527 cv
181.738 68.9717 li
185.172 69.502 186.484 70.4229 186.484 72.293 cv
186.484 75.0562 183.218 77.3457 179.254 77.3457 cv
176.156 77.3457 174.257 75.978 174.257 73.7446 cv
174.257 71.9297 175.374 70.6743 177.245 70.311 cv
177.049 69.8369 176.965 69.502 176.965 69.1108 cv
176.965 68.3291 177.887 67.4082 178.305 66.9619 cv
176.1 66.3755 174.872 64.8677 174.872 62.7466 cv
174.872 60.0386 177.021 58.1685 180.204 58.1685 cv
181.348 58.1685 182.297 58.3916 183.414 58.9224 cv
186.122 58.9224 li
186.122 60.2344 li
cp
f
190.501 59.8433 mo
192.818 58.5874 193.935 58.1963 195.107 58.1963 cv
197.396 58.1963 198.736 59.7598 198.736 62.4116 cv
198.736 71.8467 li
196.419 71.8467 li
196.419 62.8862 li
196.419 60.9043 195.609 60.0386 193.739 60.0386 cv
192.734 60.0386 191.925 60.2622 190.501 60.9321 cv
190.501 71.8467 li
188.185 71.8467 li
188.185 52.0835 li
190.501 52.0835 li
190.501 59.8433 li
cp
f
201.274 52.0835 mo
203.591 52.0835 li
203.591 71.8467 li
201.274 71.8467 li
201.274 52.0835 li
cp
f
210.122 65.6772 mo
208.782 66.3198 208.196 67.1011 208.196 68.2456 cv
208.196 69.6138 209.061 70.5347 210.373 70.5347 cv
211.322 70.5347 212.243 70.1997 213.89 69.2783 cv
213.89 64.3931 li
211.489 65.0908 211.071 65.2305 210.122 65.6772 cv
cp
209.285 72.0425 mo
207.163 72.0425 205.767 70.5903 205.767 68.5244 cv
205.767 66.8774 206.604 65.7612 208.531 64.9795 cv
209.898 64.4492 210.513 64.2534 213.89 63.4165 cv
213.89 62.5234 li
213.89 60.2344 213.22 59.4243 211.378 59.4243 cv
210.625 59.4243 209.368 59.5361 208.753 60.2061 cv
208.251 60.7368 208.251 61.3228 208.251 61.3228 cv
206.409 61.3228 li
206.465 59.48 208.753 58.1963 211.992 58.1963 cv
214.951 58.1963 216.207 59.397 216.207 62.188 cv
216.207 71.8467 li
213.89 71.8467 li
213.89 70.2275 li
211.853 71.5674 210.652 72.0425 209.285 72.0425 cv
cp
f
218.801 58.3081 mo
221.118 58.3081 li
221.118 59.8433 li
223.574 58.5308 224.523 58.1963 225.751 58.1963 cv
228.041 58.1963 229.352 59.7314 229.352 62.4116 cv
229.352 71.8467 li
227.035 71.8467 li
227.035 62.8862 li
227.035 60.9043 226.254 60.0386 224.411 60.0386 cv
223.379 60.0386 222.597 60.2344 221.118 60.9321 cv
221.118 71.8467 li
218.801 71.8467 li
218.801 58.3081 li
cp
f
238.561 59.4243 mo
235.687 59.4243 233.789 61.7139 233.789 65.1191 cv
233.789 68.3291 235.408 70.3389 237.948 70.3389 cv
238.952 70.3389 239.79 70.0601 241.018 69.3623 cv
241.018 59.8154 li
239.707 59.5083 239.231 59.4243 238.561 59.4243 cv
cp
243.334 71.8467 mo
241.018 71.8467 li
241.018 70.395 li
239.4 71.6235 238.227 72.0977 236.747 72.0977 cv
233.565 72.0977 231.359 69.3896 231.359 65.5938 cv
231.359 61.2109 234.263 58.1963 238.561 58.1963 cv
239.288 58.1963 240.041 58.2803 241.018 58.4478 cv
241.018 52.0835 li
243.334 52.0835 li
243.334 71.8467 li
cp
f
253.493 60.9043 mo
251.596 59.313 249.78 59.4243 249.78 59.4243 cv
248.385 59.4243 247.52 60.1504 247.52 61.3506 cv
247.52 62.4673 248.133 63.1094 250.032 63.9746 cv
252.098 64.9233 252.404 65.0908 253.019 65.6772 cv
253.604 66.2075 253.912 66.9893 253.912 67.9385 cv
253.912 70.5347 251.958 72.0977 248.664 72.0977 cv
247.38 72.0977 246.292 71.9297 245.091 71.5112 cv
245.091 69.2783 li
245.091 69.2783 246.683 70.395 247.883 70.7305 cv
249.055 71.0371 249.949 70.7856 249.949 70.7856 cv
250.059 70.7856 li
251.065 70.5068 251.735 69.7251 251.735 68.6362 cv
251.735 67.9941 251.457 67.4082 250.926 66.9893 cv
250.478 66.6548 250.171 66.4873 248.888 65.9009 cv
246.04 64.5605 245.315 63.7793 245.315 62.0205 cv
245.315 59.6201 247.129 58.1963 250.228 58.1963 cv
251.512 58.1963 252.376 58.3638 253.493 58.7827 cv
253.493 60.9043 li
cp
f
265.716 65.6772 mo
264.376 66.3198 263.791 67.1011 263.791 68.2456 cv
263.791 69.6138 264.655 70.5347 265.968 70.5347 cv
266.917 70.5347 267.837 70.1997 269.484 69.2783 cv
269.484 64.3931 li
267.084 65.0908 266.666 65.2305 265.716 65.6772 cv
cp
264.879 72.0425 mo
262.758 72.0425 261.361 70.5903 261.361 68.5244 cv
261.361 66.8774 262.199 65.7612 264.125 64.9795 cv
265.493 64.4492 266.107 64.2534 269.484 63.4165 cv
269.484 62.5234 li
269.484 60.2344 268.816 59.4243 266.973 59.4243 cv
266.22 59.4243 264.963 59.5361 264.349 60.2061 cv
263.846 60.7368 263.846 61.3228 263.846 61.3228 cv
262.004 61.3228 li
262.059 59.48 264.349 58.1963 267.587 58.1963 cv
270.545 58.1963 271.801 59.397 271.801 62.188 cv
271.801 71.8467 li
269.484 71.8467 li
269.484 70.2275 li
267.448 71.5674 266.247 72.0425 264.879 72.0425 cv
cp
f
274.396 58.3081 mo
276.713 58.3081 li
276.713 59.8433 li
279.17 58.5308 280.119 58.1963 281.346 58.1963 cv
283.635 58.1963 284.948 59.7314 284.948 62.4116 cv
284.948 71.8467 li
282.631 71.8467 li
282.631 62.8862 li
282.631 60.9043 281.849 60.0386 280.007 60.0386 cv
278.974 60.0386 278.193 60.2344 276.713 60.9321 cv
276.713 71.8467 li
274.396 71.8467 li
274.396 58.3081 li
cp
f
294.157 59.4243 mo
291.282 59.4243 289.383 61.7139 289.383 65.1191 cv
289.383 68.3291 291.002 70.3389 293.542 70.3389 cv
294.548 70.3389 295.385 70.0601 296.613 69.3623 cv
296.613 59.8154 li
295.301 59.5083 294.827 59.4243 294.157 59.4243 cv
cp
298.931 71.8467 mo
296.613 71.8467 li
296.613 70.395 li
294.994 71.6235 293.823 72.0977 292.343 72.0977 cv
289.161 72.0977 286.956 69.3896 286.956 65.5938 cv
286.956 61.2109 289.858 58.1963 294.157 58.1963 cv
294.882 58.1963 295.637 58.2803 296.613 58.4478 cv
296.613 52.0835 li
298.931 52.0835 li
298.931 71.8467 li
cp
f
308.835 71.8467 mo
308.835 53.144 li
311.153 53.144 li
311.153 71.8467 li
308.835 71.8467 li
cp
f
321.758 60.9043 mo
319.861 59.313 318.046 59.4243 318.046 59.4243 cv
316.65 59.4243 315.786 60.1504 315.786 61.3506 cv
315.786 62.4673 316.399 63.1094 318.297 63.9746 cv
320.363 64.9233 320.67 65.0908 321.285 65.6772 cv
321.871 66.2075 322.177 66.9893 322.177 67.9385 cv
322.177 70.5347 320.224 72.0977 316.93 72.0977 cv
315.646 72.0977 314.557 71.9297 313.357 71.5112 cv
313.357 69.2783 li
313.357 69.2783 314.949 70.395 316.149 70.7305 cv
317.32 71.0371 318.214 70.7856 318.214 70.7856 cv
318.325 70.7856 li
319.331 70.5068 320.001 69.7251 320.001 68.6362 cv
320.001 67.9941 319.722 67.4082 319.191 66.9893 cv
318.744 66.6548 318.437 66.4873 317.153 65.9009 cv
314.306 64.5605 313.581 63.7793 313.581 62.0205 cv
313.581 59.6201 315.395 58.1963 318.494 58.1963 cv
319.777 58.1963 320.642 58.3638 321.758 58.7827 cv
321.758 60.9043 li
cp
f
324.605 52.0835 mo
326.922 52.0835 li
326.922 71.8467 li
324.605 71.8467 li
324.605 52.0835 li
cp
f
333.73 65.6772 mo
332.391 66.3198 331.805 67.1011 331.805 68.2456 cv
331.805 69.6138 332.669 70.5347 333.982 70.5347 cv
334.932 70.5347 335.852 70.1997 337.499 69.2783 cv
337.499 64.3931 li
335.099 65.0908 334.68 65.2305 333.73 65.6772 cv
cp
332.893 72.0425 mo
330.772 72.0425 329.375 70.5903 329.375 68.5244 cv
329.375 66.8774 330.213 65.7612 332.139 64.9795 cv
333.507 64.4492 334.122 64.2534 337.499 63.4165 cv
337.499 62.5234 li
337.499 60.2344 336.83 59.4243 334.987 59.4243 cv
334.234 59.4243 332.978 59.5361 332.363 60.2061 cv
331.86 60.7368 331.86 61.3228 331.86 61.3228 cv
330.018 61.3228 li
330.073 59.48 332.363 58.1963 335.602 58.1963 cv
338.56 58.1963 339.815 59.397 339.815 62.188 cv
339.815 71.8467 li
337.499 71.8467 li
337.499 70.2275 li
335.462 71.5674 334.261 72.0425 332.893 72.0425 cv
cp
f
342.69 58.3081 mo
345.006 58.3081 li
345.006 59.8433 li
347.463 58.5308 348.413 58.1963 349.64 58.1963 cv
351.929 58.1963 353.242 59.7314 353.242 62.4116 cv
353.242 71.8467 li
350.924 71.8467 li
350.924 62.8862 li
350.924 60.9043 350.142 60.0386 348.3 60.0386 cv
347.267 60.0386 346.486 60.2344 345.006 60.9321 cv
345.006 71.8467 li
342.69 71.8467 li
342.69 58.3081 li
cp
f
362.451 59.4243 mo
359.575 59.4243 357.676 61.7139 357.676 65.1191 cv
357.676 68.3291 359.296 70.3389 361.835 70.3389 cv
362.841 70.3389 363.679 70.0601 364.907 69.3623 cv
364.907 59.8154 li
363.594 59.5083 363.12 59.4243 362.451 59.4243 cv
cp
367.224 71.8467 mo
364.907 71.8467 li
364.907 70.395 li
363.288 71.6235 362.116 72.0977 360.636 72.0977 cv
357.454 72.0977 355.249 69.3896 355.249 65.5938 cv
355.249 61.2109 358.152 58.1963 362.451 58.1963 cv
363.176 58.1963 363.93 58.2803 364.907 58.4478 cv
364.907 52.0835 li
367.224 52.0835 li
367.224 71.8467 li
cp
f
377.94 60.9043 mo
376.042 59.313 374.228 59.4243 374.228 59.4243 cv
372.833 59.4243 371.966 60.1504 371.966 61.3506 cv
371.966 62.4673 372.581 63.1094 374.479 63.9746 cv
376.545 64.9233 376.851 65.0908 377.465 65.6772 cv
378.052 66.2075 378.359 66.9893 378.359 67.9385 cv
378.359 70.5347 376.405 72.0977 373.111 72.0977 cv
371.827 72.0977 370.737 71.9297 369.538 71.5112 cv
369.538 69.2783 li
369.538 69.2783 371.128 70.395 372.329 70.7305 cv
373.502 71.0371 374.395 70.7856 374.395 70.7856 cv
374.507 70.7856 li
375.511 70.5068 376.182 69.7251 376.182 68.6362 cv
376.182 67.9941 375.902 67.4082 375.372 66.9893 cv
374.925 66.6548 374.619 66.4873 373.333 65.9009 cv
370.487 64.5605 369.761 63.7793 369.761 62.0205 cv
369.761 59.6201 371.576 58.1963 374.674 58.1963 cv
375.958 58.1963 376.824 58.3638 377.94 58.7827 cv
377.94 60.9043 li
cp
f
160.979 100.439 mo
164.64 100.439 167.016 97.1685 167.016 92.1641 cv
167.016 86.9927 164.695 83.7773 160.895 83.7773 cv
157.233 83.7773 154.855 87.0483 154.855 92.0806 cv
154.855 97.1406 157.261 100.439 160.979 100.439 cv
cp
160.979 101.92 mo
155.666 101.92 152.089 97.8677 152.089 92.1362 cv
152.089 86.3218 155.666 82.2964 161.088 82.2964 cv
166.177 82.2964 169.784 86.4609 169.784 92.1084 cv
169.784 97.8389 166.205 101.92 160.979 101.92 cv
cp
.67 1 .16 .2 cmyk
f
174.562 87.9155 mo
174.562 101.474 li
172.214 101.474 li
172.214 87.9155 li
174.562 87.9155 li
cp
174.562 86.0425 mo
172.214 86.0425 li
172.214 84.1968 li
174.562 84.1968 li
174.562 86.0425 li
cp
f
177.553 81.6812 mo
179.874 81.6812 li
179.874 101.474 li
177.553 101.474 li
177.553 81.6812 li
cp
f
181.634 88.1948 mo
183.394 88.1948 li
183.394 84.8682 li
185.714 84.8682 li
185.714 88.1948 li
189.1 88.1948 li
189.1 89.5083 li
185.714 89.5083 li
185.714 96.6084 li
185.714 98.9575 186.247 100.131 187.981 100.131 cv
188.594 100.131 189.238 100.075 189.937 99.9082 cv
189.937 100.942 li
188.455 101.39 187.45 101.557 186.247 101.557 cv
184.123 101.557 183.394 100.02 183.394 98.2583 cv
183.394 89.5083 li
181.634 89.5083 li
181.634 88.1948 li
cp
f
193.935 89.4521 mo
196.254 88.1948 197.371 87.8027 198.546 87.8027 cv
200.838 87.8027 202.179 89.3687 202.179 92.0249 cv
202.179 101.474 li
199.86 101.474 li
199.86 92.5 li
199.86 90.5151 199.049 89.6484 197.175 89.6484 cv
196.167 89.6484 195.36 89.8716 193.935 90.5435 cv
193.935 101.474 li
191.613 101.474 li
191.613 81.6812 li
193.935 81.6812 li
193.935 89.4521 li
cp
f
207.293 87.9155 mo
207.293 101.474 li
204.946 101.474 li
204.946 87.9155 li
207.293 87.9155 li
cp
207.293 86.0425 mo
204.946 86.0425 li
204.946 84.1968 li
207.293 84.1968 li
207.293 86.0425 li
cp
f
214.703 95.7144 mo
216.353 95.7144 217.441 94.3452 217.441 92.3042 cv
217.441 90.2075 216.353 88.8657 214.646 88.8657 cv
213.025 88.8657 211.961 90.2354 211.961 92.2764 cv
211.961 94.3452 213.053 95.7144 214.703 95.7144 cv
cp
211.181 102.815 mo
211.181 104.521 212.747 105.694 214.983 105.694 cv
217.357 105.694 219.148 104.409 219.148 102.675 cv
219.148 101.417 218.561 100.97 216.296 100.551 cv
213.583 100.048 li
211.937 100.635 211.181 101.529 211.181 102.815 cv
cp
220.853 89.8442 mo
219.063 89.8442 li
219.595 90.6831 219.847 91.4653 219.847 92.416 cv
219.847 95.0718 217.694 96.832 214.451 96.832 cv
214.31 96.832 214.031 96.8047 214.031 96.8047 cv
214.031 96.8047 213.725 97.1958 213.725 97.6436 cv
213.725 97.811 213.725 97.8389 213.78 98.1748 cv
216.463 98.5942 li
219.901 99.1245 221.215 100.048 221.215 101.92 cv
221.215 104.688 217.946 106.98 213.978 106.98 cv
210.873 106.98 208.971 105.611 208.971 103.375 cv
208.971 101.557 210.089 100.299 211.961 99.936 cv
211.766 99.4604 211.684 99.1245 211.684 98.7339 cv
211.684 97.9507 212.606 97.0288 213.025 96.5811 cv
210.816 95.9937 209.587 94.4849 209.587 92.3594 cv
209.587 89.6484 211.737 87.7754 214.927 87.7754 cv
216.072 87.7754 217.022 87.999 218.141 88.5298 cv
220.853 88.5298 li
220.853 89.8442 li
cp
f
225.519 89.4521 mo
227.839 88.1948 228.958 87.8027 230.132 87.8027 cv
232.425 87.8027 233.766 89.3687 233.766 92.0249 cv
233.766 101.474 li
231.446 101.474 li
231.446 92.5 li
231.446 90.5151 230.636 89.6484 228.762 89.6484 cv
227.755 89.6484 226.945 89.8716 225.519 90.5435 cv
225.519 101.474 li
223.2 101.474 li
223.2 81.6812 li
225.519 81.6812 li
225.519 89.4521 li
cp
f
241.759 87.9155 mo
244.08 87.9155 li
244.08 89.4521 li
246.542 88.1387 247.491 87.8027 248.722 87.8027 cv
251.013 87.8027 252.326 89.3408 252.326 92.0249 cv
252.326 101.474 li
250.007 101.474 li
250.007 92.5 li
250.007 90.5151 249.224 89.6484 247.379 89.6484 cv
246.344 89.6484 245.563 89.8442 244.08 90.5435 cv
244.08 101.474 li
241.759 101.474 li
241.759 87.9155 li
cp
f
258.812 95.2949 mo
257.47 95.938 256.882 96.7202 256.882 97.8677 cv
256.882 99.2368 257.75 100.159 259.063 100.159 cv
260.013 100.159 260.938 99.8242 262.585 98.9009 cv
262.585 94.0093 li
260.182 94.7085 259.762 94.8481 258.812 95.2949 cv
cp
257.973 101.668 mo
255.848 101.668 254.453 100.216 254.453 98.1465 cv
254.453 96.498 255.29 95.3789 257.219 94.5967 cv
258.587 94.0654 259.203 93.8701 262.585 93.0308 cv
262.585 92.1362 li
262.585 89.8442 261.915 89.0337 260.072 89.0337 cv
259.315 89.0337 258.056 89.145 257.441 89.8164 cv
256.94 90.3472 256.94 90.9336 256.94 90.9336 cv
255.093 90.9336 li
255.15 89.0894 257.441 87.8027 260.684 87.8027 cv
263.647 87.8027 264.906 89.0059 264.906 91.8013 cv
264.906 101.474 li
262.585 101.474 li
262.585 99.8516 li
260.546 101.193 259.343 101.668 257.973 101.668 cv
cp
f
283.02 83.8896 mo
278.741 83.8896 276.113 86.9365 276.113 91.9409 cv
276.113 97.1406 278.853 100.327 283.327 100.327 cv
284.165 100.327 284.89 100.244 286.122 99.9634 cv
286.122 92.5 li
288.637 92.5 li
288.637 100.83 li
286.066 101.557 284.527 101.808 282.853 101.808 cv
280 101.808 277.735 100.914 275.946 99.041 cv
274.185 97.2241 273.402 94.7363 273.402 91.9683 cv
273.402 86.1821 277.176 82.4082 283.243 82.4082 cv
284.976 82.4082 286.43 82.6313 288.609 83.2183 cv
288.609 85.9023 li
286.232 84.6162 li
285.033 84.085 284.165 83.8896 283.02 83.8896 cv
cp
f
297.078 85.8462 mo
295.679 85.8462 li
293.302 82.2681 li
296.072 82.2681 li
297.078 85.8462 li
cp
295.176 95.2949 mo
293.833 95.938 293.247 96.7202 293.247 97.8677 cv
293.247 99.2651 294.115 100.159 295.428 100.159 cv
296.378 100.159 297.3 99.8242 298.95 98.9292 cv
298.95 94.0093 li
296.547 94.7085 296.127 94.8481 295.176 95.2949 cv
cp
294.339 101.668 mo
292.214 101.668 290.787 100.216 290.787 98.1465 cv
290.787 96.498 291.654 95.3789 293.582 94.5967 cv
294.953 94.0654 295.569 93.8701 298.95 93.0308 cv
298.95 92.1362 li
298.95 89.8442 298.28 89.0337 296.435 89.0337 cv
295.679 89.0337 294.422 89.145 293.806 89.8442 cv
293.302 90.3472 293.302 90.9336 293.302 90.9336 cv
291.459 90.9336 li
291.515 89.0894 293.781 87.8315 297.05 87.8315 cv
300.014 87.8315 301.242 89.0059 301.242 91.8013 cv
301.242 101.474 li
298.95 101.474 li
298.95 99.8794 li
296.909 101.193 295.708 101.668 294.339 101.668 cv
cp
f
306.33 87.9155 mo
306.33 101.474 li
303.981 101.474 li
303.981 87.9155 li
306.33 87.9155 li
cp
306.33 86.0425 mo
303.981 86.0425 li
303.981 84.1968 li
306.33 84.1968 li
306.33 86.0425 li
cp
f
315.526 89.0337 mo
312.648 89.0337 310.746 91.3252 310.746 94.7363 cv
310.746 97.9507 312.368 99.9634 314.912 99.9634 cv
315.917 99.9634 316.757 99.6846 317.988 98.9854 cv
317.988 89.4248 li
316.672 89.1172 316.198 89.0337 315.526 89.0337 cv
cp
320.307 101.474 mo
317.988 101.474 li
317.988 100.02 li
316.366 101.25 315.192 101.725 313.71 101.725 cv
310.522 101.725 308.314 99.0127 308.314 95.2114 cv
308.314 90.8223 311.222 87.8027 315.526 87.8027 cv
316.254 87.8027 317.01 87.8867 317.988 88.0547 cv
317.988 81.6812 li
320.307 81.6812 li
320.307 101.474 li
cp
f
325.142 89.4521 mo
327.463 88.1948 328.581 87.8027 329.756 87.8027 cv
332.049 87.8027 333.388 89.3687 333.388 92.0249 cv
333.388 101.474 li
331.071 101.474 li
331.071 92.5 li
331.071 90.5151 330.258 89.6484 328.386 89.6484 cv
327.377 89.6484 326.568 89.8716 325.142 90.5435 cv
325.142 101.474 li
322.823 101.474 li
322.823 81.6812 li
325.142 81.6812 li
325.142 89.4521 li
cp
f
343.815 90.4585 mo
343.312 89.5366 342.473 89.0337 341.354 89.0337 cv
339.372 89.0337 338.056 90.4868 337.75 92.9751 cv
344.208 92.9751 li
344.208 91.6611 344.122 91.0742 343.815 90.4585 cv
cp
341.494 101.725 mo
337.75 101.725 335.233 98.9575 335.233 94.9033 cv
335.233 90.7388 337.889 87.8027 341.663 87.8027 cv
344.766 87.8027 346.695 89.8716 346.695 93.2266 cv
346.695 93.4219 346.695 93.7305 346.667 94.1489 cv
337.61 94.1489 li
337.61 95.4355 337.694 96.0225 337.945 96.8887 cv
338.588 98.9292 340.181 100.131 342.278 100.131 cv
343.676 100.131 344.766 99.7402 346.695 98.5098 cv
346.695 100.048 li
344.849 101.222 343.255 101.725 341.494 101.725 cv
cp
f
352.649 95.2949 mo
351.306 95.938 350.72 96.7202 350.72 97.8677 cv
350.72 99.2368 351.585 100.159 352.9 100.159 cv
353.85 100.159 354.771 99.8242 356.42 98.9009 cv
356.42 94.0093 li
354.018 94.7085 353.598 94.8481 352.649 95.2949 cv
cp
351.809 101.668 mo
349.685 101.668 348.287 100.216 348.287 98.1465 cv
348.287 96.498 349.124 95.3789 351.053 94.5967 cv
352.422 94.0654 353.04 93.8701 356.42 93.0308 cv
356.42 92.1362 li
356.42 89.8442 355.751 89.0337 353.905 89.0337 cv
353.15 89.0337 351.893 89.145 351.278 89.8164 cv
350.774 90.3472 350.774 90.9336 350.774 90.9336 cv
348.929 90.9336 li
348.984 89.0894 351.278 87.8027 354.52 87.8027 cv
357.484 87.8027 358.742 89.0059 358.742 91.8013 cv
358.742 101.474 li
356.42 101.474 li
356.42 99.8516 li
354.381 101.193 353.18 101.668 351.809 101.668 cv
cp
f
361.815 81.6812 mo
364.135 81.6812 li
364.135 101.474 li
361.815 101.474 li
361.815 81.6812 li
cp
f
365.894 88.1948 mo
367.658 88.1948 li
367.658 84.8682 li
369.978 84.8682 li
369.978 88.1948 li
373.36 88.1948 li
373.36 89.5083 li
369.978 89.5083 li
369.978 96.6084 li
369.978 98.9575 370.508 100.131 372.241 100.131 cv
372.859 100.131 373.5 100.075 374.199 99.9082 cv
374.199 100.942 li
372.716 101.39 371.713 101.557 370.508 101.557 cv
368.384 101.557 367.658 100.02 367.658 98.2583 cv
367.658 89.5083 li
365.894 89.5083 li
365.894 88.1948 li
cp
f
379.51 95.2949 mo
378.169 95.938 377.58 96.7202 377.58 97.8677 cv
377.58 99.2368 378.446 100.159 379.762 100.159 cv
380.711 100.159 381.635 99.8242 383.284 98.9009 cv
383.284 94.0093 li
380.878 94.7085 380.461 94.8481 379.51 95.2949 cv
cp
378.67 101.668 mo
376.545 101.668 375.149 100.216 375.149 98.1465 cv
375.149 96.498 375.987 95.3789 377.916 94.5967 cv
379.285 94.0654 379.902 93.8701 383.284 93.0308 cv
383.284 92.1362 li
383.284 89.8442 382.611 89.0337 380.77 89.0337 cv
380.012 89.0337 378.754 89.145 378.14 89.8164 cv
377.637 90.3472 377.637 90.9336 377.637 90.9336 cv
375.792 90.9336 li
375.846 89.0894 378.14 87.8027 381.381 87.8027 cv
384.345 87.8027 385.604 89.0059 385.604 91.8013 cv
385.604 101.474 li
383.284 101.474 li
383.284 99.8516 li
381.242 101.193 380.04 101.668 378.67 101.668 cv
cp
f
393.765 101.668 mo
390.021 101.668 387.503 98.9009 387.503 94.7915 cv
387.503 90.5986 390.188 87.8027 394.212 87.8027 cv
395.583 87.8027 397.287 88.2227 398.016 88.7817 cv
398.016 90.8223 li
398.016 90.8223 396.839 89.0337 394.102 89.0337 cv
391.695 89.0337 390.048 91.2139 390.048 94.5127 cv
390.048 97.9507 391.837 100.02 394.743 100.02 cv
395.974 100.02 396.896 99.7124 398.322 98.8457 cv
398.322 100.299 li
396.562 101.277 395.274 101.668 393.765 101.668 cv
cp
f
402.738 89.4521 mo
405.058 88.1948 406.176 87.8027 407.353 87.8027 cv
409.643 87.8027 410.985 89.3687 410.985 92.0249 cv
410.985 101.474 li
408.665 101.474 li
408.665 92.5 li
408.665 90.5151 407.854 89.6484 405.981 89.6484 cv
404.974 89.6484 404.165 89.8716 402.738 90.5435 cv
402.738 101.474 li
400.418 101.474 li
400.418 81.6812 li
402.738 81.6812 li
402.738 89.4521 li
cp
f
420.013 89.0337 mo
417.133 89.0337 415.233 91.3252 415.233 94.7363 cv
415.233 97.9507 416.853 99.9634 419.396 99.9634 cv
420.404 99.9634 421.243 99.6846 422.473 98.9854 cv
422.473 89.4248 li
421.159 89.1172 420.683 89.0337 420.013 89.0337 cv
cp
424.792 101.474 mo
422.473 101.474 li
422.473 100.02 li
420.851 101.25 419.676 101.725 418.198 101.725 cv
415.008 101.725 412.801 99.0127 412.801 95.2114 cv
412.801 90.8223 415.708 87.8027 420.013 87.8027 cv
420.74 87.8027 421.496 87.8867 422.473 88.0547 cv
422.473 81.6812 li
424.792 81.6812 li
424.792 101.474 li
cp
f
157.028 120.599 mo
155.69 121.24 155.104 122.021 155.104 123.164 cv
155.104 124.53 155.969 125.451 157.28 125.451 cv
158.228 125.451 159.146 125.117 160.793 124.196 cv
160.793 119.317 li
158.393 120.014 157.976 120.154 157.028 120.599 cv
cp
156.194 126.956 mo
154.073 126.956 152.681 125.505 152.681 123.443 cv
152.681 121.798 153.515 120.684 155.439 119.904 cv
156.804 119.373 157.418 119.178 160.793 118.341 cv
160.793 117.449 li
160.793 115.163 160.124 114.354 158.284 114.354 cv
157.531 114.354 156.275 114.466 155.663 115.135 cv
155.159 115.666 155.159 116.25 155.159 116.25 cv
153.32 116.25 li
153.376 114.41 155.663 113.127 158.896 113.127 cv
161.853 113.127 163.105 114.327 163.105 117.115 cv
163.105 126.76 li
160.793 126.76 li
160.793 125.143 li
158.758 126.482 157.559 126.956 156.194 126.956 cv
cp
f
170.578 121.017 mo
172.222 121.017 173.309 119.652 173.309 117.617 cv
173.309 115.526 172.222 114.187 170.521 114.187 cv
168.903 114.187 167.842 115.553 167.842 117.588 cv
167.842 119.652 168.934 121.017 170.578 121.017 cv
cp
167.064 128.098 mo
167.064 129.799 168.624 130.97 170.857 130.97 cv
173.224 130.97 175.01 129.688 175.01 127.958 cv
175.01 126.705 174.422 126.258 172.165 125.84 cv
169.459 125.338 li
167.817 125.924 167.064 126.817 167.064 128.098 cv
cp
176.709 115.163 mo
174.924 115.163 li
175.455 115.999 175.706 116.779 175.706 117.728 cv
175.706 120.376 173.559 122.133 170.326 122.133 cv
170.184 122.133 169.908 122.105 169.908 122.105 cv
169.908 122.105 169.601 122.496 169.601 122.941 cv
169.601 123.109 169.601 123.135 169.656 123.47 cv
172.332 123.889 li
175.762 124.417 177.071 125.338 177.071 127.207 cv
177.071 129.966 173.809 132.252 169.851 132.252 cv
166.755 132.252 164.859 130.887 164.859 128.656 cv
164.859 126.844 165.976 125.589 167.842 125.227 cv
167.648 124.753 167.567 124.417 167.567 124.029 cv
167.567 123.248 168.486 122.328 168.903 121.881 cv
166.701 121.296 165.476 119.792 165.476 117.672 cv
165.476 114.968 167.62 113.1 170.799 113.1 cv
171.942 113.1 172.89 113.322 174.005 113.853 cv
176.709 113.853 li
176.709 115.163 li
cp
f
181.084 122.328 mo
181.084 124.306 181.923 125.227 183.79 125.227 cv
184.82 125.227 185.74 125.003 187.024 124.417 cv
187.024 113.1 li
189.338 113.1 li
189.338 126.76 li
187.024 126.76 li
187.024 125.199 li
184.986 126.565 183.871 127.011 182.425 127.011 cv
180.081 127.011 178.798 125.477 178.798 122.801 cv
178.798 113.1 li
181.084 113.1 li
181.084 122.328 li
cp
f
200.236 115.832 mo
198.341 114.243 196.53 114.354 196.53 114.354 cv
195.135 114.354 194.269 115.079 194.269 116.277 cv
194.269 117.394 194.884 118.035 196.779 118.898 cv
198.841 119.846 199.147 120.014 199.762 120.599 cv
200.347 121.128 200.655 121.91 200.655 122.857 cv
200.655 125.451 198.702 127.011 195.413 127.011 cv
194.131 127.011 193.044 126.844 191.844 126.426 cv
191.844 124.196 li
191.844 124.196 193.433 125.311 194.632 125.645 cv
195.803 125.952 196.697 125.702 196.697 125.702 cv
196.806 125.702 li
197.812 125.422 198.479 124.642 198.479 123.555 cv
198.479 122.914 198.201 122.328 197.672 121.91 cv
197.226 121.576 196.917 121.408 195.637 120.824 cv
192.793 119.484 192.068 118.704 192.068 116.948 cv
192.068 114.55 193.88 113.127 196.974 113.127 cv
198.255 113.127 199.121 113.295 200.236 113.712 cv
200.236 115.832 li
cp
f
208.234 113.239 mo
210.548 113.239 li
210.548 114.772 li
213 113.462 213.951 113.127 215.176 113.127 cv
217.462 113.127 218.775 114.661 218.775 117.337 cv
218.775 126.76 li
216.46 126.76 li
216.46 117.811 li
216.46 115.832 215.677 114.968 213.838 114.968 cv
212.807 114.968 212.027 115.163 210.548 115.861 cv
210.548 126.76 li
208.234 126.76 li
208.234 113.239 li
cp
f
225.24 120.599 mo
223.901 121.24 223.316 122.021 223.316 123.164 cv
223.316 124.53 224.179 125.451 225.492 125.451 cv
226.439 125.451 227.358 125.117 229.002 124.196 cv
229.002 119.317 li
226.605 120.014 226.189 120.154 225.24 120.599 cv
cp
224.403 126.956 mo
222.285 126.956 220.89 125.505 220.89 123.443 cv
220.89 121.798 221.727 120.684 223.651 119.904 cv
225.017 119.373 225.629 119.178 229.002 118.341 cv
229.002 117.449 li
229.002 115.163 228.333 114.354 226.493 114.354 cv
225.742 114.354 224.487 114.466 223.874 115.135 cv
223.372 115.666 223.372 116.25 223.372 116.25 cv
221.533 116.25 li
221.588 114.41 223.874 113.127 227.108 113.127 cv
230.062 113.127 231.318 114.327 231.318 117.115 cv
231.318 126.76 li
229.002 126.76 li
229.002 125.143 li
226.967 126.482 225.768 126.956 224.403 126.956 cv
cp
f
233.908 113.239 mo
236.221 113.239 li
236.221 114.772 li
238.675 113.462 239.623 113.127 240.851 113.127 cv
243.138 113.127 244.446 114.661 244.446 117.337 cv
244.446 126.76 li
242.132 126.76 li
242.132 117.811 li
242.132 115.832 241.351 114.968 239.512 114.968 cv
238.481 114.968 237.701 115.163 236.221 115.861 cv
236.221 126.76 li
233.908 126.76 li
233.908 113.239 li
cp
f
255.373 116.417 mo
261.924 116.417 li
261.924 117.672 li
255.373 117.7 li
255.373 125.477 li
265.16 125.477 li
265.16 126.76 li
252.891 126.76 li
252.891 108.082 li
264.154 108.082 li
264.154 109.364 li
255.373 109.364 li
255.373 116.417 li
cp
f
269.757 113.239 mo
269.757 126.76 li
267.415 126.76 li
267.415 113.239 li
269.757 113.239 li
cp
269.757 111.372 mo
267.415 111.372 li
267.415 109.531 li
269.757 109.531 li
269.757 111.372 li
cp
f
272.46 107.022 mo
274.775 107.022 li
274.775 126.76 li
272.46 126.76 li
272.46 107.022 li
cp
f
285.422 115.776 mo
284.924 114.856 284.086 114.354 282.97 114.354 cv
280.992 114.354 279.68 115.805 279.373 118.285 cv
285.814 118.285 li
285.814 116.975 285.731 116.389 285.422 115.776 cv
cp
283.109 127.011 mo
279.373 127.011 276.865 124.251 276.865 120.208 cv
276.865 116.055 279.516 113.127 283.276 113.127 cv
286.372 113.127 288.294 115.191 288.294 118.537 cv
288.294 118.732 288.294 119.039 288.267 119.455 cv
279.236 119.455 li
279.236 120.74 279.319 121.325 279.568 122.188 cv
280.211 124.224 281.8 125.422 283.892 125.422 cv
285.284 125.422 286.372 125.032 288.294 123.806 cv
288.294 125.338 li
286.456 126.51 284.866 127.011 283.109 127.011 cv
cp
f
294.232 120.599 mo
292.894 121.24 292.31 122.021 292.31 123.164 cv
292.31 124.53 293.174 125.451 294.484 125.451 cv
295.431 125.451 296.351 125.117 297.997 124.196 cv
297.997 119.317 li
295.598 120.014 295.179 120.154 294.232 120.599 cv
cp
293.396 126.956 mo
291.278 126.956 289.884 125.505 289.884 123.443 cv
289.884 121.798 290.719 120.684 292.643 119.904 cv
294.008 119.373 294.624 119.178 297.997 118.341 cv
297.997 117.449 li
297.997 115.163 297.327 114.354 295.488 114.354 cv
294.733 114.354 293.481 114.466 292.865 115.135 cv
292.363 115.666 292.363 116.25 292.363 116.25 cv
290.525 116.25 li
290.58 114.41 292.865 113.127 296.101 113.127 cv
299.056 113.127 300.309 114.327 300.309 117.115 cv
300.309 126.76 li
297.997 126.76 li
297.997 125.143 li
295.961 126.482 294.762 126.956 293.396 126.956 cv
cp
f
302.901 113.239 mo
305.215 113.239 li
305.215 114.772 li
307.667 113.462 308.617 113.127 309.844 113.127 cv
312.13 113.127 313.439 114.661 313.439 117.337 cv
313.439 126.76 li
311.125 126.76 li
311.125 117.811 li
311.125 115.832 310.345 114.968 308.505 114.968 cv
307.473 114.968 306.694 115.163 305.215 115.861 cv
305.215 126.76 li
302.901 126.76 li
302.901 113.239 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Abby Franklin) ()%%Title: (UHI_Logo_CMYK.eps)%%CreationDate: 25/09/2011 12:14%%Canvassize: 16383%AI9_DataStream%Gb"-6LKYY=dP1UV!;@Up77Kr\A4;[&_LPAM+H8WUaWno6TBH%,C]CG&oo/I_]5%PMZY*Dh<EFBE='+[[BJ`S%<=>Yg;kj!;>/\u9%R\WDp7>g</0bo]9Q-S2T#>34I<Lr'e1u"&SZ5qCG*I^lYR&S7iZqAm>Xbp>"SpIfWgLqjJjdOe'M^3d4e]<mE"J7Z9)n0(TrJW#E%:B"fS)W0-g18V:GWHf5V)3Lb_7"DT6OD'p%L#Z4qdIl'7WaQOEqERVY2LlR)-,28*IPkJM(#2_1l5'(Dn8X).?p;rp0AL.QfRT+*%0Z`>&c!bRA!9O7)IlV_F8r]_21eY7Ah#d&nX48_\pB&Scpd^We.AlEo'sTSUAm)RYcuO$#??Vbi'p`b'0bBTo`Dk#949"=9^bs)r%jd9cI)YpS=kplV_Zl$_ZC]J/bCZ#TPrD@TbY(9"4V/!?fG\0i6/`iB_j'M>OoKNnKXD*j9I^2bp>@lEuXHo;K'_-U@2*IrSh""W:%&a_AckDAd<"T4l#+m4)GDA*_[<c/L@X[Of-!@BA`r,Os8K9NlNc.,#*&Z]p\7M@LV4(`5r&WpR\C]_YGT`DE"7(-bfWW=eHj5%&E%ao(Wl#Xq&j3s't&:LT\f][B`X\gEnM9[Qj%Z9j#h,ZA-OYj7P]^*]5o,PsbEMckU\D>]`?!5`D-h(%Rn<&8g\dugHYd00q$>qI=;%'f&"HH-lcY;&,=s>^KqPM;RPFd(E@kbg=*HNba.SP6j(DNp.qB_eHXb+74B^<dh_dXA-s[$aiJ`P4Qc%5=J<g^Ua1&6=cYir80,1%V5>2Q9(dmhKRbZ#NN`qe1&Vdc41o^Y/]*\DRkn`hqSOo:l2e0li`$;J/'"\$-Om,dl?EmJ(R28&+7P*h1@f/VYRj3njtdhp[p!GN%RdA@DH42^%hF4"aKbm=*Xi>E-=0%Sig%LI0FUk9FJj1<)SC.VlP:@5BG>B3PZR7F>A(M)rp[8,H*,"P.Vd(i;Gu"=KPjd-gO3^6j%m'BP'lW<2Q<\?6Z^-2]CViK@[jid)2Y=@!C%&-4e;(P]TTSV+]pnOrkl6LV1>Wb)jQdT\6B.2nr+K.MT@18U=Q'Gc9Oa]V7jU*e$%Ip&m7't8]KJKR9`R$&Y5q"OXJ<,2j>(]=(:r]#F8^&dG17#N$R^>);B!l7!k=ttl#[ObF<=9eP09*9rK+^dm"8Xa>u^tEn8AB&^Y%di$dcdKf+PWC"oY;c:h=_>1nq@tnR[j?Krmr\eoJP1@V]-X[dk9^(1bg!JF)CkDa&<Rr?&9=&/u!?pC*,OIi"9[h?48K<n.g.5(=%33HsF3Whu$o\QY;jA_8!5_m*JNi]7dbQVU/"'.7q/&ZM;C(V@,%E"A)E)f?#KI&-\R1^l`8X@1^7_4n%Mh<n?6<mO.c>4WB0P/Kq%IVhM^"JB+%+s@jFJYa#Z=c(6U#rDpfalOhL0aM<4'TL7("(4jRpg@YRifPbs_e@;<iQ.YsMT)Em),0)k"EACl,R34L$!9V;a<WR7%U.CfS@d?QMJ^O'$=B+FQJ8U8?AYPG]BT=<6C_I--ZB1$ER%/[JP>mD!WYQ7"!=C9s[]4>?ChS2!Op0<c"B5QDW9TI)A3&:!%GmXm%1U72n&X?4YF[jr8!?bmV4HM8t9*QK)DCN4]NJJHGeHF7=@0QE]A%#3]b@'T=.>f;g>`VS%VW&q"\0>pc%D4@r!*04)Q>5%l=&Es:%L7r+($/=dWl*j`&\YIGB(<8:KCi;t*/HFKm;]3q9\R6-XNYS*\JmiDQJ4u+XSLLk=ZC+RG"Yi]Rh'VWK">#to.0*!f[o8.c33'j2%<;RM/[S7LI<B3a:W42k*[OnYg!7hTP_r9=H+DY'l*s@rCS!1'VRg[WnR49^:/0S.-d#h\#,QjPo8[EEHC/!/75$V4E)CGQ2&;j.[%&SS*m/ohgeJUlLe@rsS;#jd)g(f1qoOBQ3*<(r^@!*:4,_:n2q;lRX;L5J*tPm<\^k"he1r'ClAk!>/0L'qb"M.NI9CiV'\i[P!e%"6\9fojVmO0[gr\-$GYKgscMS13&<<!<T]eL;kJcLB+k.@R-?^*@rd5mWhlEEZ"lXbE@HbQ)!VP(q\K@$Hgn`,Xo)L83Y7`Nlflt%n0k>BglfquNXFJm@8BkVP^lB-\QGYbWc22S]nRacOT;"k+p'GMJq0j.LBF-*iu5LCU0o:<")Uc6&3E.mQ5$TCR$drIV4uGG,i(k]%L0iJr^go/$1@qo41G2&qqNd9_70YSb<-h3b'L;`#/g%3h63KRH>D6Xk$'-<H1+-K[L;@H%0^V\n,?3%%g1UHm!UPa_#m(,:jW#,C%M*TsI$c`BX(^dEX7E(kbXu2uk!`s4j0IB6h^]EaI,H@K4XE5<9%7d7P`dNi`aMOrU0KcQj4pMuSViGOf<DeG-0P(D^";jnP"Z+Zj%J^g>+V,dcSgQIH;?BLY_+@oBE&^)lS$:*-0Xrupo=bF1_0g_$pBLRF_2VC^##`Y4sU'if5N.;KBh8;Z+ELf&0>!pQ=Fd3%d.HnXQ%]qM*meqi/(E\IWC(lAk<JeTKK[;8.[oRdq&o'+;qZfps[;aecWKEOQ-DA+6?+^,O1%u-O-@Nd@05hnc+Ci1hd#ATdqYAaaM<&@mh%DTEf!0ef1$\S4T"_-kIub5c@V-N"cbi)pNobCs>pY>>UZASV3%RfdM#a19_%FDXt:92X)=[&lZ*AY=@JW&#!;WA=3`1dkgV8/u=.%JUoPKWM*j91rOnU9;;TQ9MH&uF+]W!Nfa@QGGcrZ_-oW[N"/CA3!#$9/IlAi!s+"#7fj;)(!@:V6P]g7L/Zj)o%6ea6cZF"7Uup@%.C'j',6NO)iM0C1'FfT/3,%]C6Z>a.%j81;0F^,UL/YD(Qm&5md!0d95[0L6:hTBral&K3=+T,fIM'B$/8<bn6<mZU%3-('2#rjl%%!iWG=qC]$iS'!J/h&HSW#Q"S5_2raD*%9i]b8DrCo0Z%PAGsE$DEH95ZPX\A5'K5$rZ+nE857B<V-q)`/kmf\qYjc--Q\rXI89c%1m;KU"IGs)A?\07,X<7!!O3d"*h%-uodUr[j%?'A(^&KtN<=]q9b=O/*ENIV7l:`CC4^5AYsN&6CI5*8MGReuNK&iU9b(,SlqB2<%<EhqcME*&75ta3=)KZRa*jF+Z`<&^5q@Scs=K"YLL)+;&"s8E4e:cB^,_^p[!)uYrJ[0j5BV;s_">$bW=Us"^1`Y#%0d+Pij$F`H%SXBZp!88i*'6?Xc"P4pY_GH2kM*rX/eOUK*,CmUe+t@,A**9UH1?a>s:m#ar_KM)^#s0Xs0F@&9J-Qkj<-4)i%9q3_#;h3JP#6W/%3f3pM[,2oVM27,kCreRn65*(VnVO)mr>WU&d0LQC>7+PE_c4-E+^c$$L]t=A,shHt=S?G'/795pN?=,mY\jU['8&T(A9-eiGm48b%^>JujbnBD$(?D2Qc#U$3$.EH&$7B8fO?>K/<kq>VoE4@+Z411:$B>-fJ/Xdo%Q$$tj/25XY\d]fPAHO!BFnlk69QWt7s8:n;*A@k%Cs7gY#^AX%-T2dIC!=!cW/5(Ub?U9^/n#Yi$*_nhJ<l&c^h,<u:',_FQahV"2uuYVDf<bAV!9_dM?9i=!+jYI;jM9mJ1[I@=gH7k%'s[$4gI/'AN>c;qOtI$="r>&=e1i'X:;D<7+I*pj<AN/YSJ2BHFGlGSj\:92L,6!:V*KP\@Y3X,"Td-bI[*!<!2<["%`**_TLt_#%qDB96.tAo\$"-./"ABh;NQr.WJC01-pOmF<OL7NMcSG_)K&tJ8PnS\FL"8Z4>RR3Z/X21GQn/J0DMb]-EP=8-TL$:+QGMe'=($Tp%e;u7[#/m1Xim%m]IV`L"R_"2"L'C>Q]aj0u1HP@;j/XmZ.FYR+KCOW.buk[`/XWpWeWbd!.=AEES2Z,WP\e_e&9(S]T,"#5TIJ7t%;\T+>Gj<l]B`GBbGWl3pPpA,4_+6O8>o7jF<#^sM.A=UfeH:>f-B+WNW)@uc'LPC(!7PkCZqTTK9p.u==!_ID!I5uDn>Za+!*E.l%NWB^OYMoP,+Td1k^Gn*0(3GJ%2(gN9f"%sgYU4rsRl_Mg.Me>g$sok[5`mX5&EsM4RRf4kmT'@%fJkf$1hn"D=uZSGrog0M/ja98%^u;eN:PET0`k!4bb4>q1lp]iiTk]6k4)hM3(5beDaUAHP)*-_7D?0MV^'5?Gd.QEoF9uIdL27(,/al;r)sQE+!C]H)=:dm\#_]+m%<1]*M6OVX-0dNUG0^Rh^X%kE(%'q\ZeSVB9@1Ya3(m(<0=A1DB(5EHoWX5lKVORW<N#QV.$4mc*TuD(jK1H;MT$93G$rZrQbYDFH%0R1t&.cjWHX9Mm`/q>-"TM%riO>.qK"Z:N:R@@aLCrrmq[*sJ,%`#Z8'lC$G)Noot8_0\XQmmlbO!HU8h@T+m1+XDq+ZqH$MnCDP%_bOr-OT7&c&[`pa:_pkk`1tL\JGh@m&(_GfIR&d>fmp(HG%[9["sViS)W7fQ(T+_`"7jSWNTO&S!DN)&#3KV]!<$AWV6_?e!,9*e%(#4rU!?/"X't8E&d1B<rTJ@uJ-Y*<8Qr*pXVI7P]b<4p[:gBksCQL+)Ag:^.64/0tL:IlrH'*]U2B'l%b$6DDT]<OqJVO;<P8O_C%<#"[k'Cd2qEB.G2$:)73-i<]k!&4T7d5*\i9f+:cZl7N[AU9N]i]p_2Kl>".Lk%pE@cI^oW+`-g1)Gj$@X=GZ1,8omDok?&(9::L%#.'!t<u!F''1Pn(N2Qc9)N,Aj?lE,V0i3<!1e!+KUqEch3(Hs]DN%R"$.(qi6ka,9<5_$(.h'4fL*pRpLhg4BM3;sZ,VZgk'@7Fd%_>&b/Ar2&L%>[#c0PUZnXI;]3A6BAX<>5q-<Q!l_<Pg3SGJXWgn<fMuW4FDcs1rl#!GL2sM?8O$,YO"5kUXim!S&;VT7Ljb)^6I/%-8,G,EP?E1OI^/#am*?BUk4N7BKg96A`VRir"9$fA<$F(C_-Oi=c%"6)7HarZIh?!V1;r^nSfFY&tQ61?P7#',U!FS(0h.m1#TS.%AQ;11=LdRfMpXI;_=@h0(@!?,MEClaeJG>HCCf).O$7.!qb7h"i;c?Jd0pk"<l]7p"O+1jRJB"cQU^7W.]O<>RfZi!QjCqj(ggg+%:e&#A]hTaP?A\ot]E2Z-<'`mkGYh!<W!9,'U)H:W3uYX"9chiRA.(dm"m9)_!&P/@#dAg^0NKJt?j0k'J/<?a*jI!q5XRD&1d%dO%O26!)ME:1YOTFr^"b=[F*8&480X[Z\i\hFBBjs./\gY,[\el%cXB]3FZ5h(I.0HW8E%>Zl3]TgM7k8*Fhlkn#m`;pE"t!1gdT$a]%7E:B+To7YjHqTka2oNG?L.eUlEu:s8d?lCtAcsh7Ol'pQYX#CS"^+2.FBt7j+`B%X\@s5B3sF(=\5fWC"0Nfs;lC].Ukg-l;1/pj%;-VO%<[Ang28;c#EY&5N.Lt#'Mf](G^Z$;bi(>K%0V2R<7_fq@,*4NNMQ4d3X(B4L`0t,h70HDPEHs%t'`'\rFW7rU%0YZ;PT61p%a>t%B%sIL,gE\DqOoo3*5Xe.H5U-e/^_@`[ZIlf4<%VNPGS,uJ;"_!<_PB8-kSX,])#t*Z%3kFUEhI$<0en&-0L[)e@3sgJ+[CO2%/'M3!:hQ94\@doR.7tZp0.NBUfGKe)4uERKQt+<KFnm=ZR2t\;E\NMGX94XYU;+`S1]XP,@\Mm^`<-p^3/2#XB?TJ"6r"_tTm`&F%XJVIQK(NtYAKuA[e`0>$P!l.>PD<Gu2HK3f^6KZ$)TuH!0I$#P1MtD$Xtf5L9I$/@/?k4%.B(er<WW;;B_890aDruSm'>7S1!/RU%cBXrup&l`=&t:]\.cVC9K3,Pg:s>Ia5rS/X;tKF8'Ojk^>"mm8/RiF6re,FV]D,&(A:p:Y;I/FV'13e(lt77#+bY!Ha>Q([`"ZOX%,b57T`XmsQp#fA?m4D677OOt8'!=[s[nIqt)oneU3";*nCi?VCI=s>s_>tLZn+su$Y[ARYp+6PUOUGhH1aHIkUgSVBG,D^gHPX^Z%%08ihYiJ'bL;sfUR9`kPj'ieAimAV'QIpC,TGYb;c8Q^p1.:ahQt-f/U=r7A0bWu@%_(a0<SPO=<!.oP$iTWRS.H5mKB5]*@O*O`%1T$JT:2ht#AW4&K3LI_MGZkT],t$b)3ptL"_'=.@`t?H>SmfnTa/^m5@^4?*qAFm#@bG#KAKh-NB3l:$4qW=6.LmR,*@Gqt.2Yi5%!RQua[_g:5!1L32"X]BE:dpd#0P>,CgegYKaFIB.CXX3:DD&8#NWBS0D$"d-!5a.=k[-eD7kho@W<P//UamHe\](,3V2>sj%MVVc%!RquLLLNOtCuXf=2%C50KQBCW$m]5[1--N!`6fKPeX)m9,fA&`6PE\:"P;!].L$#W`j.BRVN[T>JY0_[F"L3m`Nq.^(>-2WGWJ0A%18]_jY6+cj6kmZN0ThZ9LtW3j.O/6`,)7MA2'ej"o1[Y1EbUAoNO$<!As!(#Qp0<8+K1HZ.X9nnJ?"?!%*tSC+IZG_?]U;6dFSSg%(ZZD;>&#67K^sc$e=`bmRpcV9_)J,@?#6t>e+Ke$>oWqo^.I9$."E$=]a,rgKJ'HPqVd<#ng"VHAT<qJ#bYkXPEQRaH/\"0d_CKR%:_=Xf"KZ!QLaVr=TQi>QLmIp"P'2Z2LQph\J7>;P(\X>?Ar=G74,d^4"@3K7eK=lDo#ThG.KD%(*KsS3H=5"m#?EA]Yl+\;]sAjh%pY>'jTOFR"klEjk@*$%i@]P4dZD_'G"$n2Ki#KnV0p:?BX4,K9@S]E.Vl9s&@X6=p.h[q[/;<E&(^.>[p5>rNJTB9CX4@gpUdg_;%AQ'2X_He;n\d?a#HPuop"QQf+d;XQsLlBKnHjheI!2?sbf-ud`N!K=Q@"a&[VSOX[M'Oeu!):GW.\504M6Ot@0g*>Tdt2!B5Gc.$%^hi8p\;I8A.?lR7``0f!l'+^O`Mk<0A2dK_'QEMR`b_ni.'sfmHl_;en7Yk<=4;PQ!<\U7K:T!G/E(r-2,OANgQP`<[7Jjlg`530%+=#7;E!E(8Hib(`+`:9l>S6O7p.BkDDg<pa"M3^HS_1pc)6GkO,:pD@.#_*R/OlCC0h]qt7F2Cm+7YQq!Ku3H9JnBV$FO\NH+&<)%&BhqSUp>J6eI$1'b2T(I7;@^+V]P[@KRYW%Q3&FWF?I0IPBn@OJ\nlZCmeQhBa_%ZiW\iDKO:1VjhN4NC,$37R2sO]MoI,PC06t!%V_O<aD2VoH]EUY-(q:87/LQopdEmIV'(BC&U-%_aQP,+V0O=f'"DHe^1+W/#ck+_Rl9(6"!2S1jH<XY<+P>[5/PN=`8amtLe8eXm%BV9#4X$-Y;mWdF?:'8kknT:_K__ZnDiMgeF_DoU`kIU3Q0A6o*CqS]F*-tk\!Vpmq5??(`X*>'\#Fjg_s%JlUZ2i2tf;ikQ90Brl%TVc-Sm@-KF<q21f2$d=pp6CaU;Zp3m<Q<cZ!44S&\t5O7![-,(A51#fK/P_1La&VW?'2:kj0^1^Gn"/m\0RsCAP.\-j+Rt(,D*"K%2_+<eY,u0,/TCD!J.U,g$"b-#Pc;`CILX22(LuBl"rSjOYX!^s)J0$dVe.c77=bktD&*^+9@uf83Za>0e8][-;+u!7S/6'6ru0b7%TG;)L1h;/oKc<?D>VhN<;1,)X]#jii*<KHa4a@*.r:Yl%Y#WkgW1&\.b#Nm1MeXUHe\@qN^cI&L?28]dn<s\e#SKn?h`nXiKmhp"%$NT1o1Fm&fHrf>G7L&hq-GY:BedeVn"+l'nG(O74pGAo3-eO,Z.Y53a<+m7bLs#h)N9csO[8BWT*%EFEE8rR<QoIgq%)CVp13j0.%fp<-)*7?Xerj68t=CGii#mj0?H3@Ec?;!sY$n+Fh>=']2VgsOR2P/N=#L\Np$n.VtfdIO.,ftYaU'Ka\+tZ"a[FjUrT32Q^&=H`2%Ms]#&+;5<=.UaT7Z.NEhQs!oah+#f?@uV<5JfrPCh%c6&aF\r]m&<ERgVU5Td=.6sl=ftV6(=ss=4p1ScrJcX'/hpE+Q5b]69"e(%Y.s0GOg:`u/`D.LEImpn10Dq/_3-fmc?JA@-%t[@&6+UlA8ub2@SrVno!%^O";a$6eJK3l;6\43qN1Q?Bcp]1."`6-fNCKS,1b9Y%d2eepZ05a*]3UUkBi.A6l/-#*D7j+=kd%o&7SC6"`g6t1g<'UT-I+u@_Cqtf+IE3"EZ-rgCEa<0[uF@0J)>j5)uuiPQWMfdNM[XC%78n"&Z8+DU`6p!c.qFbm5pbgB.`<g.6'3^<,(XQtZElq3]pZs_P)*8Y!@SeKRj<,5q%.5!"#kXR*_Ns#BCj1KZ)+EJ"I;?89j^9H%e*,E0a<%[JEhn&e.s*`(f,>(g$uR.)VLJT``q)lW$-g9aE4g7-M7lKd9lCkR@)Akk6NmgSd:2g5*']O)!/c7UK%J+8HVq%)9Q?-E%@b[8Q%Q7;*6@Sap/HW:=>tbV3>oQ;lDa9F@'KhhjKP**"^r"Kem3!c<fW@"T/[<V&@)YM;_t`'7Z'Ho.rilZ`NS)3P1/uBbO1*Ck%XGedhp]_j(*6`rG9Fa=?hgI=k,2<0s/@"oGfIiu_E,69>Mk<"-0e4B6GeJVm-'YlLE!_D35TT5<?0E&m.=1+^Poa_I]r@1$b8(T<%(.TZ]EDbO+[bd)JDFNcD`+hBJ_GLBGL&8B5/e8G6QrjGn^sl+,eHB+^Ia"IC]-Dt]3NSA)?qj);ie[Y@_kJm5,<Q[BYslK!?mAtW%K!Zil,jPAe#:<*=(_C?-$=nqQ>W$`O-99N##cP[4TKs`6='+StDAm>128VC;!Sb+J,Wo/0i-@Ngj9M%eG$p:_>?l@Nd<(6.n14.H%4"oY![$.#tkEd8BQA@9tUr\>7#/`09%UZ\E>]e10l#L/XdD>qtOE@9kG?n;69`fdQM2Zs,l/bu&=F5$967528e/=6N^umrlq[t9D%-#j)'J@^4FK&8j_]<T4jNbIVn0ubO6D#?SUX1=Z?=SJg@/gfQEA4t]r+BOr_7N<GK@0m#5RQRiEgp7WdU=ejRorgiYB1E$9)GM+0%pITIHD:%i,!9o%p&D(402(TbJ*\T&.GT`@^9#B/bYe,#+Rl/geO;C4E3@MH,`No\?*!+YJnT'K*niS0?Bu9i-8LR="*)Ia&PXn_@%nmdMA++X9.IG:bLQT%VBm3+^T95Xdb\2rkcU_S2eRVr=l=)#Ut/60]:;=o,L`Y`uMJ/p*B+R\8=rp=<]=a!D&J]sKG'O]lG9*1;R%M"G@:"6+H11N6&Y+ZgUZ`lUo^#gcX?I^kYP)Rs<HkY155B]8a><:U.pX/ALSLu\i'?hZGVWu0o?$e+#d$+FR_):+0O<.;&MOmlZl%!Z;#1`42\#C^?-SI/P`ki?r0i]bbrQK]hhOX$U>/X@[eS/IQK/OU"H'S-FAMK@E_:Zj&_sWCXO?JBneShIMfroG!6]N3':1%3$-K%WD/u-@;!,A:ZCL?h;qQ='.i4-,uKd[73Rs40+a<g3Mcjl(Dq2O#nG&gTsqurUm8@nQFMKR">nmj%:nYX0+iVA:DDJm>K&67J>Q:*%=LPG'JT't<167/kdP7jHQmt90iLcM]?pb\i^5\1$.2KYaJd]/:"T7p<Mr_>+X>I2T'a3j^(5ZCJjrk'p4Y+[fQ8gSd5E\;<pa<B_%"UhW!^SgCqacNmimZ9E*@0LSR@fa`HB2X\k&Tk7-]U=>Wlo#^F$:7InEtDsAOG(i=S<Idi"j\49\38N/CmK:C$VAF`VH,\/'Sh#E%9u9Ub;o^+NVM&/\o^j)XU$!b1:$`09fGm]ZbMpHEGQ15h0V4EcaV5^3hH03m7$9$M38CS(qnE-\`5+V:C*)2q&kC7_J]j[6Tr1=)%gj\N*!=hh4S*5ekEcn72?l=`so<V4.\TWupVIF16_*a3l@u<jm^QBs?Agm#I%,7H:`Sp4si6[(r<bOq:JmcR9K=a73,X;Ze)@rAj%8aOaE_7^>!I0!=W01SlEgcNO6`:>S]PESmhWO$qZ>QO)[67aii@oqVsh%mIN9O1mFo\WoHKn=,Z)P";aj.ft'K3m_!N'&e%Mjp)s%s$D:H"!ZT"OKitc#;VK6f0BBq%kP-HF]R;KlQ-)!.9-c2\YIPt"i3*g!2XlVZ3[nCJ4E=<[Pnf8pa(:X03p0:4o"b5%gU5iqrm%g%DPgA;1/k75f>u[qlLe$J\5mRjYGkEk4DF,+^BT+j*h!&/;Qdl,.kiNXo[moiNJ5IEe8!e1S.:MUF/`F6ga`,)M6-,HS,R']8+ROB%,&qmC5/.%.0@uhe#C.JuH<Di]iPQ%r?@?R,nA?]a=Gp&X0RKLT2\??#%"mIhs(PN0BNQ&L)N5M@jKGiNj&]nXI_>e)Z4rmoT;=mG%3A`Z7H`T5RG"YWWc-S!bqB+n"7c/:t4M)Z#_'1aJoO[L<>dh%C%`-Q&R)rs`HOMDAcY^&3iFa4Zs7jeOSm#^7RWlYi`gVYC$iBb;%>Ua*LWO=9(q53c$%BmL^-@al(5kYhV[n!@TAj#g7$YD?1PNZ]Qa#U6P/t/VKIY]*8\SP)YntcQLVm*9t(^niK&U=@$]u-Uqj`GR[%V)NY;"(ku#D.'>(A/tl,7=tEWQ0k<so()3$HegeH>9e+[$;:mJT?g*2mWqX7k(Vs<Dt%MBL;*06TPqOT>r;T$!,1jW[-uP0>E#YE%H+'VFZFq<<9X;?'[Pu>%-J@7&bk?pc"0"rh\5m@WX*cS--[U49?KdR=,i+rcH]rPiP3u&m]h,e:CJX[;mLQdSna$s)5Ms9mhhpu2%d_8R<)=tdBHZt>(#TWediqIW%+m(h"h<;O3cGss@Lb!k"$!ug`W6m/lg`Ij=L!q7Ld_SDV()-$qX[])H<"j'Lhb#F?H>X)KD11A#%N.#q?_Rn^BC\Zda/ASc"ZWaWdE1;\K@FJOsfq2(Nhp?s.'/r]^$0K?Rh66d)Anaq0qu!K7^?ikE-O]-VnC"8Iq30Bkp$hZ!K$a<7%iP/B9]O\.uBKF]5XE?ILKjC-E\P3$'Y>sE9i6lQ=a12V,nu'n+MGE$Aa?-0LOL@Vs.5uf7)ZCOR3<'@<OoN*a8O+AKPqfI[aJ2GP%M"Qa/MEt!QV.qg0Zi/LS8%KMl%V9p)nV6%shl7iYqjtZ\@Da>tHBfmlZ:Qfh`ZVWuGSq.1#,[!FrqS/Bd#8C4RfjVV`]6tB;8Y2a%N\r'?S]f3Gn1E\g/DoOnI(@`hF\9PLag^Fh*O!t?Y.2aG1\IC5SSolW*kb60o(%.(M*,gl-^RBp%0]%mRZ@,%(]W=l-:`f>;_@&,%&'8"WSFBeXJ"_';`qR--*doC>[1SFpN;7H:H#d/'E_kbEg_5f[Tl6EI:8-/E0+p[&V)7RF*VKid80L)?YMm_m1\+SpbX/;qKKg:C%(/rGPRTG!AQ"s11hG@tX%aE_>0kTCJjG^W(HZp8W-cTsRNS2Id3I<j)D7hU4@A@*r)J:91RZkjMgTd0(Z!SQGUT^q0*oZ/#2r`oU%lRN=9c^2AZ<tn!ei8bW,IQUA3;>BPC)00%10JB2lfZ']?@r'K4s$Y$,M&=N*DfR.rSSH\,?asZ+5>(Y&h=-I])%XF\ot*n@2uN8.%);8DUII%c=PIHhrV+Q_nfu^i@\(Wrbl>O`]8J1kJde0Zrp1r<kUVDKn,S5B_[;ju=rSqQeGE0"`#gLIqaUTg2O:&[$r`a[,/(qQ\%\]0#Mm(F-\2o8`9pJi:r5p,u(+.AD&ZKf>7Zi2`kYDgZiPD7!ZJ]\ArU878n(P_nOpQ3Q_SR8(9!d/<?hFQqTnAeU[MdELur_OD"%rptifckB@qFq-^Ghq*16A2(BeCt?JD&[b\J`,fY0'UBc;:ae1o5JdXqIY1]M^K/8DQ-ZohXl6/\Jt*"5]Ya'5Wp>>P/<Y5"q4h+:%4E#\$5C^9tZmQ@-*d3$,=U7*?mB']'_ePEgr5DRE4NaqbnuJT4::4&@?L;IZ\,$TjMD[C&1M3%\rnSQK$.$^tX8'E>__<;`e[R8n%GB4TJ4=>'DnF9fq_h<M;md6R"R='d#4-u/k0Rn1j6H>^:j#G6ghJ)>;_n;V/@<*@M]c;gL^RO7;iAl1!ajE12%O;!TNl-g[Y/]8J%kMOO(R.-WYQ2GTA*+lkMh$@e-gfOHd3=Z^oPIIj_a6bk1=RZ:&S^T\G/@eW;a",En>C8;IKQD[-=npT\iSSuVj:+f"^Gg[ElMOpM%g6eV<O$&A%0*r@)]c@n(^;TS3?7gJiDe;f%adH8<&M0C@?aaXAR@dTgM+*n9Zn]%'Bb(3-&8bn'`nd;u6r>?*Cgt`-fX"/"2R-m.%HT&-ADr7,i2g$024'1psbZ\]Bs$M-XP@YD>fpMg$AJ:O.ag1`'0,n2Skb1ce14IP>3*7#2n`LE0mm!>.rc62[A`q[_BU9[YnUSpG%Ruet8]tC,L?G]LfpqMk68*"e]MT@jVPToVc3rBKf?&&q7n*S2>WEO8!V.qIW7YBmT?)O)/@2]5"r]#Ck2e!V2DsWIN7\.1)':-8>%oL;NqW9^QM&EC<dg9>/\^)r.KQPf!.IeD^\-snkrjsTgliT723eXmO,`n_Vn]G!*hf??`?$"Il0o!M*'eprk[Ubu\f^HL%"9_NCO%_^pX#pP')Ck^)42OK)Mm.L>;]=0:tN%,$CC18;HO!?s?F6d@gu),\GCOmqf#jYa]oDoL)`mP9:4c+G@Sq<u';pnt15?E*a*ELYqI%[f<E>I61XQ^SS3!$\4u\@'Z=cfhUsGX_g.F[)YGPZ&1Bk:7c8L:UZJ-E]][-;6lms8F%K<eB&KsA.*[gKfo1"OY4p+>KFJ[RE668%30h7u]21?;66>T!f4587I*KKSg2$ZKQHQ\.@C[hRSt;G@q+@6ke/=^]c=Z+K&]<2s`CR2n\$[)\edA6_Z.3fW[47u[eaOoiX5+k1%OcSG6\>p4pGq0pdoFm+AQ</`eEjS9dhIof/RhX]XEC9So^>kNip%9]YFfXg>YINnpC8(9!>Q7R#Q/1T6k8)WaSl:%ED2'Cf\4JPq%;N7/Fj*GY[4su_^j<c1`J&khuU%a\>s-5(9k)cdL$S!%Rs)I]e6M'9(iK'*n5(OKQ<prVFBF:.R(?;et`2$N/Q/u'4%B98P.Q]ro%q;,m^NOkU7BZ#1PQPdShP:HuKjJl.&_cKA78*)N)<ujW[hr)q$36kc(l8Fj;c(o7KDc\S_Q%mh+GS,^sD^KUr8_muV\!b`_-?YeL%h.BQoq6/@d?Gf2/CYS:Wi?HbTchlR,($](2"oaKbc+$j-hJr@*nqP/o)27Pj*DG>:(cOq(r!eYTN/[QO)P`m5*.+UZ0#,l2>\]ik%V-t\J\*#OpDeG$0n!q$T2/^-Lo)@.Kq9Im?cc4djNp:B9MX-eF48%M(SSr.fIq3De]K%jl!+)Yr\,YSiI/i0bfdYF":;5fPo"X]E%dsq:<J[Z6qKRP1`E[1UF0;6a"XBG<5rW(TS=&?3lN!utf5t:hlEsj\ieuVn'2V]W^&tW;Ea\MlED0r,@ImQ0oD^5=t5HF6-',['=%q(nKIDdYmYWS&,dAoI^cg_EtQL1MQVW::dg`[I@1O8`H1pldQa1abL\Kb9>7EpQ$:OW'gdB6X,b_Z3>c4t16*ATTdYC:oCtL+t,l%N,9tZ]pGH_GXa#KNAlsu:5TtMlZOXENH)>dPG6'mW%lRdNM\MKfp8lpBhT/G0N-'nHO!mV1af%uiC:AH34>?iQ+XEd3VfON5-C0f%hfrOg6ZRoENU=nZeQ1c77.=]>[l8n5rqu$J=QkNj*hA%Tn_ERb\!di"H?Q[lis\t((X5i65GVs2XEY<C>cBj&%(<Qh94$Sj4q9E$%<YrGQ-+s,QaFB_Np[lst'FXj[-d>h>^JK7\<[M`$[4sUc]4gbYdD&qB%3L-pSh:qG_nLi&MuK!9;6K"D[`Y7,Dm,2rcJDkF+cRT8%K#H_UP(.Pp^5GmiDg!1Vg`:hG"kW6VHcGpc=a3-Mr;;rSm`plQ^sV6@=:[%Alo%9G%-;gdMDp/BkIW1"LHaPcp+#(MUa0:Dj!F4e%](`AV]ho48,iP4<I.&HA$ggV7$/aD)0hM/[Q_R-hf7V7<_Dapjhg7Ki(&F2Q\!QZ>Ao3_$9esFS`])$7-5k\dj(lj5Y%kA]PNRVN%Pd*sW<oj"<n;Y<,R&>?.]1_rhi+S;Ep#,DcVL7k'$RA3Q,<k8aP2>5W(SMMTabpsbg`T:^nJoKgjMd%ll'1]YLj*9s-gu8<XViXT%+U)C`X1\..G4I<P&I,8cSU@F4CMe_[A#&k#*53K<Z2a_>mSU\bHJDTQ8Be`S`KVO'pkIAJhg*R\g^BmPXdV!=Xpt4_C@XM*Jlcor%PB-@IQ*\NMhS#h;qrdPV2knLnX3ap7=N(8MS^%.]q/S<]E05?6M!*LGN%\uEX)4'.C8:#%qa.o&9&&%eO0^h2Qh$0I`u:)2\)O8O%T:B`)]V:U67pBNkNS[P6>uj<c`q`u@dMcOQ8DsO<aYlIMZ/h50O-.SkJJNa*0C#P9]dM!0.E4uFW9MUuIC[rh2#q-Z<\MW`JP!4-%M>$qV/9g_>,(;%;2KZ<]1)N%,lYcJ)kK?BW1At:f<crnE9>BF2?5aJu4,K<\>.cZuQi?e8>]9f<#32P(Gs;'`@Z#/d"lF<e1b"iR%Ro'G3\@rBf$qpgjrU[LZ68LCXpcsoQD6+Tmnd&9X&Tt/m$1DD2?GjgB>3?rRVthsk%[Ti5;l;H'f6hp/e+$&TkDD@<Q]+UckI;D>%M=2FnBP,J:B6Zncgir`uIQ$WnF&Z3sELdcp3TdL9mF7gWhpOKEZ-^7''&UK0r-JNj6]1@C^UlTeo$ap``Bh5i2jW=h2pG'gea;:8%o#T7O?!.brs3p9m!=:i7oXF<'LZiZl"cU&lgP)MaiC?u+SklCH5UuDq+i!-`?7jPTf=W>=n#]]NG8Ln*k?Dee-U,Oo.BS8`rPneq%O-Oq\aN#AO7/^Pc:+":sN2m9[rM^\7D3^5NdW&VaUbY`C.eaFFkFN[T)`Q78450Co<`&#GIrAm)ag(>Z9d[^M`#JXWC[&FoHC9rj%mh^E/c@3&3$,'KgF<8WnVpS,&D/K:ISC??P@kB7\WohXbO>Vl_&LfK_ZT"jr]5L9ejG>mDUM?*>XWo/Lfcdi,F.Q<I'LR8+`;&Qn%DdHulpJT*$`+j36raaLN7j?;O4leh6&"tB6ioT_VfD1n/E,o!#PQAEpk9GER;`)3A9+U9%6$s+U!U0aXE*TH8!X\^$cjBk&go"%-%pqbI"S^Pm;7i/oiO1"Q.4Nq^1kJC2VrZaj,VPKTUR>,TIUmPb.Wi<lhP,-eE5U%j[rm@G*?gu):r:1:^59j@m..ZIpMA-&:I6P'5%a%T3mNJJS'/^60t'd$u+$q$Ag89RU&@MX>b].bed!0G!"n^2_$;?IcEm0*lJ3ldAR.S`DS5c^AkM`:Jd^HtCUrYLrb6mA5K[jpRK%VC9PT+(-iFVCne5aS\BcqPrqlSs6(mC8+`Z8*3,8l7"8;f;kdL,VIqjPmV>q73Bk`"Hi\`f=Y^UlVmFAmRB3la_Wds3]\@FNY"_B%CCZj*hbb>NI<&M/_9WekD*O[TL"`:@8U.AWF6(EA3_ump3UmHLdt9lCYRcpm\QjGi@3EV7JXBI_HDKDV75AGP\]Rc8VC,C%p_iQ:%+tHU`5'$5Ina\Q8]XeZ2Z&o*'D<(PLq<]tSi6*5:!]bD$_`q\*f_#4AT0G3UTYpn!6tn67,2-emZ:aIWJ`?`V6sGZ/5@gas7c4OL%'3"frKE!>-2Z!W3HU6NZDbR8S<bjq#oFG%do,%%eD-2q@0Mq%p?toRYnafa!jg;#kn]c<3`DSS1&2N%ZP&[[G'Pb!>Po:rNItV2g%Ko;glIi3f(_J,8*_<,(k`=:^2Tc]Lp4Pk%f4g"e9CX$oZ?\?m-+<N?q/qHPqK1n!,;p:_!VBYU41?`DE=7A&/ePjM(p0]FSWtnm8%Af.+k<;uk2Fc:rDCP:7@Kh5tRU-+j\Kc8gs&\L$<$BdfY_Y.=ph"2,dH;Z/EPVuad.Bcd5i$+9[F#d#-).(N9eR?:uV$Yd,?TRdq%ZrV7Ek&C-t-o(4^X66Vf/3MOss3Z'K!;k`$c!VZYDg;*9hiHkKAQXgU,f/5sY6?('"!S/,Z'QW#VfW4g"iksmkW)'dfp"',Qm`;0%.VaVJB+[a0;/+8F2l<d@0702k2KO#=jRnqIhS46ZA>8Ek$icI.;IZCRI\/^:H!cl7<muQ/q%ahLrIBCrBY.RL!`0,bWOm[p^*m"H%ARV#h=491W!S((!(ig%:4l%H)T-:6D_Ir?loYek!iohDk^d+kt!AENGPbEQje1&!@:!qpk5#TPaTD:.Vkj"1%g3$o*'0:9)#L50C%N(SRrp429#j<d-Q2?A-1WCi;j9uGuCL.RaXb6TqjT`XFk;jJ]E"n:KJ,#R.EKGZn5EYO"lKn0FU9/tER0i?0Pasa&n7R>,nIj2#Y%#X-jrrB&tj:XpTKG,rlPdr\,KNITDbHF5PFs)R099!(_HghkQ`/O!+(\M&n/NX.Z^DR3?@JQgO)_?)jmgkORB*:o[NqB/J^DRoK)%PgA03X5"9VJ*.A2M@>%ppf4f9k;8kcY^`gbT5)_KH->'3fim5]PMUr%6%g4L(.bVQ%hK&$'IaAQo&Wb4P-:!JpfGB9;:_a0\WHZp%W3r)U;Upa`h7n]k7a)&G)`Uu0dkN'R,(!&eG[L7I;.7_-J-6m=%:]tJ3gg*=LE!4D9;rT4i-f:5$QH"&9^,^'.@6L<,$FYq>@s8o%Z5/'4/s*f\`:l'iEZ$8(PO"?6KMVDcpnaMK=m]E*Bq*+lS&@NV^JF+2cT$7d00ku4e],K;a(qdN.8bmn#2g,=@n8%9N24kpf,KuM%[8uZr2[Tnh>g'ml_nLYYNWLs8+iX@b^)fpInf>Gb#i7g,^lgIR3Lmi,p-1D4Io?u4MKdI';#HZ9@1K(-6YH'D/bHFmTpIf+I:\Bb%m,_H2B!(X8QL*MX_mP4dHp3CR@#9S;a+&MC>RWcms!NTm*`d!MpiDD-nLH8F7_+b5laBn`a8MBQX>RhUA_ghe`%+!uD8)^Mgth+8%/b4d5BkkkDe0!/@^5<n&M-lkse!+@B+q<Ys<u?C8]f&*\@An4jcn/fG5<hdEqOIXSH/aX`c'N1E1"/tD@=15M+Wd__j$:gC#Qq%(%@n-\8Uu)+9E<(6af,d8tD)qh+MuN-(m(YQ@R0#$-K[Hb!14^:RY3LQ^LuU?7CQ;JPcn>Q[aH9!?:U&%f8!$E?e>SY'V@/24:$r30%^Jl?gXgOU[-a2+$o4d^;nmhknDW<`t:2;tgs3WT8T_cYYBSrZhr<KG)Fk7(\lX=,$8o<TJBf531d(pr(!gK28Zt/"_a?qsAJl3c?%./hI$3=9-;6Y@[[ge_7lSD6"EVcXJQ\UQI]ksDB64I/OW92$BBhRX&`=f;,GEh;(-Bs!CO(mo,$;KqE/#HV!1jhS-U:0VP/j9kQX%N6;KNH"pns6;tiu:u*RB1=E,QRN:3Gj\f__ZJm]IK^QnT,Ong@-K_]$j?ogJgVo<ICA#+"3c(-B@.m$9PZ?/2rbrblU5+8QSe&Jk%_iKI=n8(Y6dc?d,fnO*-AD*8X\h9D:]KhoS\dsmAY/IPrjk\J&[SDVM4*Q+I&#bo\pd;nKrInLl8o2::PK])_Heebh:li1d`JS@O%W]ADI^N@pE1.7fBX1n=4-2MnUauln$cl'#fM0mL>2=H6PU[:G9ea04=f'!uT\Z+</.SFgn93&-.UAWfo1jga`Do_M/(:%ujbE154%H+A4Z2`OOYn6<7.h5/H\I.r@b#6BPP9[+a6V([sFg'>+8//:f;I3VT4RhsW;WE1V@%HN$?*bi&Dc#Fi!.ffrUJ$;!4Bal8T?c2%6%9k?HUeK18nf(fL:"-0F#6ZQOQjH52OE#DA=cM\l+&>NdKs,9_8C>:Hj8tS!%X/%DBr<h2GpgXableoeMdd:iiE96JH6b7DWi62g.%m,.O[*UKR#+`pRi\k&=W=7bNSQOXNGEega.p^OY!HCBm+MVN8s0+df!:/QfQ0\jZa06[8!5.333S"KL0qdkk)PFen;"HFT5TF+O_%fqj/@V\@(="F;9>(XPl;FV]Up>X*u-9.'hi\T/cVQ/%u5\c3"2P[1a@<olRk5UHo6q:p%lnlU$,ji28A9XtU?JBh(q7D<FreH/-A%_\p^EV94q\]ei3!1P$_Fo?sNUKluG*lQQoX\<&1_TGriUjah=8U@h'YA$+HI-fYLp>CH^Mk_&doZ%M,r8jClHN)'mKH\4VZ56]fM%?S19A@u<H`j>^:DDE*u(K"LOr'V6o2>Th'*8L+#8RU8G4@IO;P@8en<M<nf@rC2Em!R(\t`#ub-Cq0*O%*WrM2'8Q?_4Yi<i#0"D%0>n8s:(rXHg.Lc=4*fT91RM%\eR3-`h+3*bl3OII@S%N$T?hC4dVsXHW_PDa2!`)07[sY`ZSR]iM'u0<+s8O*&q78&qc.E#l4DcA%^_aQ*@+27r\L2FW[+*[SEWeE:9rfDd#UH!,,4@un9nM_"b0DY<$3A<P<g3?i7P"L4L::Ln'39FZqIE]H<LC62N364R].Z#cXm-9S%5SjfF*V3U:4u=)c=JJde-*6Zr&8mN.pJdD`O6D&N3^R?u5%Dl#.GQZ(iCl=PX[.d`e/fh^Pjq5]2h:MOHD#;%?1a@slS/@cZjt8D%;E[m;YEOqfB"AB7K`:H?[/\0r3U-Mh8ESW"?7QI@A!X2l]kQU-mrH0[Cmj,F:PBk-,KTa@mGq]?H7rMTM"G_YI-<MBEk>G6lCQOa%T'$hgZgjfmCGW6IOSB(:K+4R?9gpPJr27-QI]D"cQRQO1D5=jT&=W:PYF\YU:&)!r/TYG]b[qf8M6##leObqL<kc'@4)c@#c\'W(%gplHdm:Y0%m%\0R#/,/_k6O?IK"+n&8bFJToqI<>GhLYub;HrJHBQPO?`g6SFs?\.Y>2I`HI1?>IAB@tpQ!Mj:r0G[T,We7%oSSM%nPS#i'?X`H4]%K&Val(TN%'td'L]P!YRb'8)"/dt[g<,7f\`-'=K#lS?VYPfpNjTU/#[/0iL9C)VmDrKn#c8rE!PT>-[L9-lU/1k%-?g[.du7&7Tf0%9.)9(pp=0"8m,9GMfqQerksXiO.L%(OSaKsb[jCE0lY@U>9i?JeW-)dfmhnJ$?OJru:;f>DG+nRLol.t.8ZTo$%7l&A\o_PP/-f.[bep89f,KKndD7c<T-DZ^$ZsGX6Hk2uK%p4rho_qme-Xg,l\Xr,r'79NNm;10_r=2d:>efYsJ_daBkD+BeWD<ge%kW%J1C4oKZIZ\Cf\`S67>QXJaQX8.l8\UgWp)->\jY_FVoa.t9`Y_\35(%L.B#-s-X**XCl=f*'Sh+Z6IB,N^=B6'-d?Us2V2Nkl%$2;R$(WlW(92E)Dkp%9bgF'=7Q8Ym(kLQ3ijTBZ!A0nM@m8fh1SuU6ERH`i/\R`g=2*MqFHYHu%D<Gq`lU]c:bMLMbm<GbGR7So!%<`IYW)+eS=^87EeV2m_(pT_].NTGIrVfAZ::.9BXZdTs>*AeF*HY;$&%F)RWQ8Z5CWE=!)WN3(9i<K-7;jlj<q0BH;qKA4P5-HNX%/%'0q<4Vh;Zt7Ig1+DVN<T75.mV45?.S9r,4c+SDm@sF@m)s6.Q]-@Xhe<X?m;?Rs-$-Q%eqd=l;TmHgAq%3cS;L3QA\L?uZr4lT%.l1&Z.:97n'@4qaZh[aA'?A_X<*mk!hq?YR]4,kiaGo9ZdsV[SS,Jr40C2I^<ig3]itj4%<AoSIVpLlig>D%Zo'*f92P5BJ*nE:0%;0@%2EP23lBdYobR7Xul`N;o@1XGC_]^nI=.kRTUfk8mB/?Lt1=8M]7X`T%h8<fn(F"?+qD(D3kR/Ke"^Tb%nn>oARNV-(k47R'7%Y-PE[[(^9UDDt4c\_8I3EA,'[0>4I/Jmpodd.d`Q1Zr$78sKa!V<"WYo.(o"cEAe2M6_D1@3"'5UH?TrNL?j>ZE6&n?M;,N1L"Is%G/(ESWUOInH(;F?A@JR9?td_cS0:i%`OI\KW^KTdM3eBUKra@66<99<Ar]cicGj[4HKhb+H83JGpQQ"RR>OUt+8.SgqpJMWKE&B"%Ps/aBalW.r7SL?ip-Ei)V5:;roWjY6IbNk)Xu85i$f@!5ktHs8"20nOc?fSf`.8c@SNd+"Ie0'P\Jg1ddtuQV'm7Z9Chq%'j'+^=%97:#:'itp\V]BF<A&<K'4PSL]4`&)YchV2NoOIkKSl8UUrO@,s1BVJ$T@;D![p)0e9P`D4o_ufWAsHl_*_t?^/QKGS(T9HIXL#.<%27%bNAr'9TMP_KVV,%EbqB3-)H-_i2g<nG/SKUWZGm6t!ipp!AB&@fiZCUNYgegg_@L9$5kk`_>CHdq3b6dDu?\9H4;MifS1*13m%lac/5Gj_6Xl5!sO9EsR<'7]CD'3Gb2f_8JshC5AR\a="kBBorIBB/o2qGGsK9Y$b(/@h[JlXCu1*'tLqh>"m=9XS_Ij_KUPeAGC'%s-r8W[Eg2L](fSlN1\lQN\\`9JL/EnO+g95:q<:>Zc='P-Ha?jPu$.JAiDq%p2VsY*FkIo_C43'eF#uZKs&]ZLkS^&in@D7HaK>g%H2)6e\Qf+'B\Q2Gg2Vm9f(U,k@^=K3)8o^]HoY1BB(ktHY1DF:fa=hAo*(jp7n]<VT+A0TVd$B8.XW/Z0((V>$C1D*f7VRfBlcJU%#ScIqN-Ochp9aE?\*mkUf%K^qFCRm7h[4AQe'#./,r9><?,N2Alu`6gq^cnU(J*4fL3`L9>SbQDk$7hs>[Ip!SN2%)roQ'/r-:"4%5J4P*:.573*'\r*adKI_amAblgu^@-B2ceEgjPY&36u+V(8d]Q)dm`f/hAIMZ/\bHqrI@82GY!"]a.AT\!C@GjYoJ_B32=AY<OXV%D&Oo&1k)^B;b`QMB*H0+1dT6[%M/;71)jqUJUU49H!7:)o\@hh1f6Gu@UuXUq!6D9[S)P4cDS]_o5sHb>^j?#N2s;6+4JBLa8;[F%S':;^hmPehj\<jF>hbR2kEFX%[P\e:Do47XN;T(d7PRIRdQ`_LXE$coh5%/A#>"ti0N.G#Q&M]GUs>6\ch0+\f`7L8cj:g@\k3O0%A"O7sL%Ntl@RgiU9=.g!-tG04F@^K^^^JMGZ_7pg)8fu]6om=0>GoF;?7:Y*&Wn72lBM:i,t9:hZjW)+=XTh>2R\$211W."-H59!%qO%o2"dQ"LAL#!K5C$H8V`+08FA0SOZst:^)^6i*2J%N`WEgL5PUlc08kS`gl]5I(g-1j-]i8n-Pcu=[hZR#^;u]Xj@m(POKN\rJ%XPh6&Ptml]]^uri-KC>n*#-GjcSIjNkp=i>Pr]Wp,2DNm;oiLOS]#^KBTdgKqIrHtHsZ_n(XSPX=l&YVQ6Hu6`-X&#FYUa3@6Bp?%10u_8Ng+?^;$Y)p:g^0B@J5Nt"mrEu#*?,;QKDjq810'^CdW;0a*;K(o"k_3NJV"]C)W^R753ZW<:9MIGVsqVHocqbo!%!00]KW=%LXjV//AFkIGGDb\+;91[#fJ'lZfjm@Tp]-?=dMm]QdVM/pX#2-HjkZAJZ,4t9+'[0-BlAuKeMA9QNF.SCdZ'[Qn[YFoNV+=2k)SS%5A)clp#Y37blcZ;>+u>?<7Iog87m0Z\Yu>7\%c^p?4mcdr4I>q)8BkQ=40apebSo7bF'A4>0!GuI)/Um=9n_1Eo5n)ai#Wb@<clo%BbLncTHjk[k;3`dR-XRko=0'mE1T,[(;KPe&D-[Ep>^p0B+QH^O^1F`FrMg3a$[VCOT;k=)\]bLCiJer3--4i"m-;JQt]m`\VI0D%=lWu!FSZ0Xk4JBnMml^J_jA3]:u>5c.N2!8HjqC'YmgLjIZd9N]6[#6^)=!;`Cfb/inHm>A?tmY1sZOe1:S&`52p#;7JY4V"e*Yl%]r0)k=;:FYXjkhB_D^`<9\oOPJ_J4Nnp0IH\Q[_@>iTnU/uQ-_j9=$sQLPVsY[bL038L@hLJHA;;EW#US`e-5(eDE;@Wm[o\\A,>%pWAS#q!ii\oH+pKrSekFJYBqYk3KpNS_Cb3Mi`ss'hR*/N]P:R9eY:F,UlF-db*s=ZW-I8Bc$,X-D`7-dVK*89U5AQRi/C+NS0YI%lcRH,h_!,adacoM-#-L455Q;B+'63ZAj1R'3'5ps?>_754Mbsl7,qq#(S<I^K`Z_].sl,611+4GVc*6XZ0perSM^Z6o*`c8o(dHT%D/!e[i;kh%/d=*K4&!:,/O='">4gG5)QC+!-XN%^C&\94#a!UEQ*NfJa>&hNB><.$)./H=s66+XUi[S]](O_/de5'O4*H]AGLd:C%5!\u>4P`d0,_!"&p]g>qkp\]\dl*a!3WklC/]B"c=/6pg*SZ$\[-/diB4+]4Q[8s.j;R9<])9(EIQ82P'Zh'&r*d:k3rKi?>rjpk%_-1!ah!V*pR_9GESN@2r;c1/sW>5;EN%?Z(\9`eG6EXWP=A^'NIO2shc__a@pL<@O%1IokhC$\2bee(>4d4;Y.na)*GDk8k6Y,un%ZJ!%Y9k5?;WB=Tq[Z#i>.X#-#fi^E9p**a@cM3L#-@';:P]*Dt]iIb-?E`gj4QkMMBD;BUO_9:WDE"uF/a1`^:>ELFW17[T(MaC@%NjZes9Do9n5&[6`(6)e=A,1F@<6=npoA/,']D>i;0CCtemAsT+Ju"dQB">PP3#/82HXllkfV>eU^7/V)o8ok/o.YZdf2HSc,YQ#]%@j\8$&=AVAbT2-$]/Ms>ZT2uHgE4lT;Y;YBbb^1qdI_JHW"mp.ia:.0e+,gq\ATn]:XKt4W:gJ&Z$Q<sT$-P`ASA8h%t8#;a'5fQ%n^I*[]=$)#<J27)>(h/-KK%*qD6AK1A/?CS\\63LX?Wn3G,fA,YJ;DJ:%*JecFa&\A?K*Ul`pF'PP76mEu7S*`+-?=hcDT)21)%W%,Pa(+YP9ArIjIHG?:gA3;A&Q_jg25"G&jpq?FT$6ei4_=(Vhl0ZeAkq,`8m.-p2tI7es][P3gM9RA=W2`,d@t:6_ju92_(jQZgqT%cH:7G!Z%Y+Ms1/YB)_W7/=P'cr&hI[]j!F-)TgFi;.F5j'6T7Nj*EY0SG]`GU-jS1(NZ@9s,u*^T:[I;/#CoVnb4igi&mgAbl#;#%f&"$`1jKYV-SYg_G%ds!IZ,(A:G[3`\Q4b;+WMs`qP7fS7u.o9)H"(!)[da_%n+#gdZ:H$lg9fn)jut\rHOHMR$kVfrg%HNpYVEb%>(c1-kAE*SQrolNMQRsOWF+Yqh!B-PZ>At;Z<:M1ibFTe7Mu0<m@teN1RVeO%RS+)rG/WIWTBX&C5-Q3p.IN=MjsG9PHB7-<.N)D%e/*fu!f*RD$S0chS-[F`$d3tPIbEE,WaC=\/6A\$*[KOZb?XW]U"t++gtTKlk!F(1_n7lWo<DNJbKKl>U`\i)E8;Bn2<#&U8?EQX%e^YO.&O+r5M)EtT50b_7S2TD_2f^(gl/prE+]YJnbJ?=L(th#Rq3.-mhu5AU>l4B!#?IkW]jM%gl+$F=<O<:ZWQ2tUeBWO92DXfC%o`He$G3B=X52"(_4&2s8V@F+q<`uAuS6`4,dW0=kZPGe*J.m5d&!fGhC2@MA>6uNXf2MQA3SJ%ob,5UiS%E`N94Os=r=;K(QL,&n%A%?`.PM)(e%l!1sa3=28Z4&2K-#$j>Y]A6sYRJ"C!*OGaIXrf3B$S'0]rR];qsGC>_KogC^Cn#JDi\NdWRIW#9XLsREOg+^G1=HC%c!QAk%"dC7!/p:(`Qa=/A/tU)gY#\c/bJC`+O0>;@du#mV:Fuk2Y.R5jqF*Gq8VG80dLe;Yb];0B0$.!E*$rRp2Z9i-k""!:D36R%6%PiUL[j*ia^QrF)RNDAg1/,];"7!Er<qEb+EOBTS;Z4Xh<=9t"o@f<$6V:6R6-f7SW>TATmN"L:,[9U;R)GKNI]St)9]G3ikhu%%@?;7Y<+;b!2]L@S49(.U_&3KE5u*%YLi"HE^APfCi4F(^kdKf2@V5UYf+(P2e^_"\)=g'RIdpMnZ><Am5!1,@+09C3882_?rZ,(:%mpB`]=6bNMY+M8T`\1M^9".18^!qM-e,ZtCW5&\^7cs#6eF"CZS?-RtK>`cWfpU^GNA6,uf2hM-a4fCm&A6fbeQpo)])NpN=dfdZ%B[j:PoW`gl%5V8sm+Z^q$`prm:5M=e5/8H3/UiJ:HiFpG1,Y]]]Xd@PCoctNZrR5`*QYSi3B9O-bZeI@A*J$ngUGY&e:-AXR6$_-%c]E"jIC=&.009me)Prq0qpX3h5msFWmbftW.tZkkX>a'#HFFkY>C6D]RBO[tF*u>L9)Dt=2`fLlk61pOHuA?HriqaaHEU;(Ni?JD%rGtf#2Vgd:r0)9Kj:IS_^4::7Skg)6lSD$%Ydp0I.*#BCH7@Z'5J_.m(<s8aV$jRN[+%)hl9\L)J3\28g>#rXQELd"j48+C8WF6F%5e$2emkbf_5GSc"m_5USNVa7cK[H1eWs12f=9nG;]5"E1T$2q+:"n<_>j^oi*h%:'R@Q>s(I'S)^'E1"Z>*\f_nGuscXuU=<@)g2%1\IO_+2AKDQAhs7MeT=PR6:4=_AijqL=V:[CWn\3B:#KiRlfbf'Ko;Y7[l4f$FPlLqT&IJ^G<oC9lUqE'BKrh[sS)L\sb+?2%tH'%00$4\X_2YU@u`T<)KDuE5/[.JgD=65/i(@r3H8g\p*!F@?+D-`?p7nFHtrF\UB=M-NX%>0kbn30ILhkUPC*I=20[Vds8350?o-uh%c@4IBQ3FuQ=)I%j,3,k.?k;O#,;*gQf)l1U,-9&-g]k^pWQ!;#*jVTZ7,1u&-PU2d*?M#KjDf58Z:KUW-h?ek_``eA"Q0!/O?AfO%#'KV_S\K0ZX?0JpS#iL%!L%]/PeOn]^1<fga8n[-C0[?Xq8W%ZQd+</d.WSnNndmCV=V]YSiBnU.%/WaZ_d(^pDHAV8"$pDB]e@<%oZE0d"JNH=&t"*Pi/I,[cM$C;b+/d4[iotd,3URqY!9)&Co6Vm2_tJ'o+s$!6"'[BEr1q%!VJ#>]Mhp(m?a#<nQNRbhf]oqH`)N3%5Q/6"$h3%So/=\;Kt2<>oq=c9ZCZNhV0.9k^9-SE('H+6"e$[>e6!"lT_?[]g!X\tK)HV_NGm#1lLsjak3Mr965IIUl<q1O"U<"]%5MWI2TBr*fCY+o6^l+\U'udeg]0t1o:j*sEOW\*63k/H%E,)K!gk@e,UtZDQl(]OD<o)1Z/K>A;^U4<b/naJlmE>-gO7q%f#:&!P%8?-dXNmGKXs)2\15MXY+(+r%Jh4\K?#/;,)o=e,%qGM2fA+1Qhk*2A2Z7#C]Hk]!B?f`/[RAUQ)i'"$+3HuBUXPd+urqe3#6QS/R%p'/FSm5]<=m%tcO%=Mn#:A(U1>M*-'1+[QMMk]B`Du!HjLQ-&ieP@8el!RmQ[MgFHs%$e;Y5Hn7P_%Z3FARN)9SS[qA)tb#@]Pq>%E0W&3c;[^]@1)':;\5f:-&c*jG,:K+?e!FuQ6RfW&tH@9f5*H^^=EXh1ieA#%3B4Kfn\UB2]6@c+W.(Rrc<*\9N*fqkk'QM2GU[6%s,MHhJd^f9Ydl8Ans*R7Y)%8E:CFXHPjVO-:u:T*6C*RtA.6ja[<'k,(67,:"pS"D>@1R[g[f:GD=]c,&4)Eh';@=H&ET$fWu\S/%hJ]S#B65sTV04H#0\G*@CB4<:=+_"dK]u#J8aFoG'@>_,@ce4:QFfh-R)+G2qauXs%qfMLAG(7NVK9-LbfjIUWrs3pJ@e2I#$)c>%6;(t$'GsibCQ\RaLK5Rt>usC&LJf:0'U((jkX/$F"ujo_B=ZV]9gRhMGn)W_HI*'16e6k1U!14,Bn$=;W>98r6$_s%g/d/DCji*:%X*)X89H#ZVHIj>OK,lGAd5rR=_[8n>$a]j)2Urg13I7/dL`beTNmj+9\K+2sQ\`_',WTt_lCfe^*^4/_7LB""2NA"F^Pq4#dLND.%57\XS#V:.F.:pTCdmgWeHFq1TkuA-@`2m_@ApC7BHTemn&&0pY$"7q_:89VpPdIRLFoE6DIe>!R^?@&poD>!C8@@T0`=[B+-LZF[%2jIh?B@GS;*6.^XI<ei^*Ee8h,d.n/q(%0^_,gtrhqph!fop<ST@dqIM72"kK5U`GCfnK,&p[U/W>>8mE#k"T[6<0c)J.$39lZ4O%U6"&`HoWf%!]cE-]a-+jL>6,Ah7+j1;5oJ&hfZob"ph9#Dh^HGnTGMN<l8K2]Y)h'ZKcQc`kE(^s6:ggr7NEOA8+3_)8Q\Cmk2e,%cZMV%JrcbSa48"%+cusr_R+\\hu/[h4niEO,15#9q</$Dm9AstM!Y8U&?F:f"%Vep@Q!U'2K8.*kJtBVNF4X7:>&'>6h,U6(cb$b%QNoYdaDg_#`ZUBF::'mnZYge1Wk?7gphc5tE$!--<C:`rhOs$FMq)F@:i;bcSiD_\,BD>8`_^Tlb5O?Foc-ULp.4Y$%n*D.:QGHC%FWVlb:R^ok`Wk@cjZIt[YflHVi&.)HLdt_-k4QY:&*m4=O6SEE6*.idZ(\?L!tKSp\,X5ETiTLkL*/;WYYGc;XaqO'^^>hYK,:an%n3@s;Jf%r..(3'Vid9k%!u-V-[(AKQ<[D-5jtC3\Z,i4-#d2?bJjmGF^UQ<b]j6Hl:kh)Z>(JAi^.$d@D[.9Q>+8lUs76%_WqMTa%UKL&&;J5I8nU:sDNq\b-aO1"W8N%BG<1Kj!HOer_FQms4WNGFSJ,+7rn2L]%:=u2_+YuRAe-e[_jhXMWE:igB06*1&Cjne\\ZaI5%O]RCURYZ17LL<$f]NK"<74p:-_#&Sdfs=$4,<lB=OrWCkC\.qtTmjEPX\5V2Eu*uOM1KRdkbXaOOj<>=s"9L$'IdKVfa$LsNQ4r'%iXE%d"I7qj*O/X0=3iZoP'%0M._uh(s!+Rf;Z=pi%^bA\fZtEj!'i)e\]+%#mTo3'=>\D2dcqKc^_k6iI<];>nHMApe2+^:nf;Q*%Q4S-!F:J';)5[j:>*F?1\]Al><i%2oXD/C*[muIlLL,`^;Y"2Hm>'g-^(P`oQpM5;UNg=WpJMb]&$2[ZM$SY`X@*>!Y:V.DLAfd(%4U->]/*,78p/-T1(8D@j)]3]'m)L7[jgOd5C:L6HSj&;u?lcRUZL/HCeNqBL7W@@liIQ5]1YY:#hI!Vi;2a%?P'Xkm&"$.$N#.?#%R-eYc$KqM8m"tK\JQ(<\mhorIpki_RN<*sbdm/XNakg&M+,!a35%C\!0"t,:e6Cpg*iRB^NN^c='b)]1jLQW#<tm^0e9X[2hE-+\%*Xi5TC$O/t\A`Z6jmlf\`_39@DQ#T]W!(@daVT!-4hb4!?aieN6YF<CBl"C>Xl"(go]]boXF5C*C6.F)o_-^;>Cihr,,DrlT3T^G%6uSRa[ee?spGB%Z0==SW$gh;8:\nO-F\b'7c_fnNb!ASEf>Eo_oWRE*p8>r2Bm&ZRBkdITWKQ-QD<#G,'d&s&hrk=2l?9=u8/:OJ%QbAgY9d`r*DRRK]b0oF_nN=LXmVP_&XNmA47AlK\?8eYsN^):IbKhL0k\Dn2^!p5tQsMtf:/.o_7uF[bGr&7.f;Ff?B3IZ:*5UQ2%0A?-Af.AjgWL!)-W-kHqqTr/[rhn3$K:ABgHJ[68@skh9I'@[*2n#g$NN60Yp0%9Wp23)fWR%!%>\5e+R?n`MAsN+bIQUh,Xt6/3%Ip&Ng]8WGNR^GACZfR`KfnS[l2fd9eo"MK2>qe27OYs46o943%H^U-+ZSLqD`$am,8W=1PD7,\<G,Jt%j)eU*0<s&^[B!Hff>#.o%]4GZ(PA9RYf"4#T4mUqgY'I4SmGGs1G'a2Y3'.lBkgo4P-lq_FH[!%U4mt8hW7SZ1;u'JkTWBaASPDWPDB!Z?7k9!KeXu#q\XR^0%::5f1V%)Oc2l@`QpY&Sgk-A==p>T)p,S#%pFDB$IXEk8DI6,'PQSQP?$boX:g7IMOGC!b"5'Y0Alu[GIan6CPnp)b[Q$*MGpm>rk%djrf+gX]DkFM#m_X7J:8Qa47(SSGPb<Q[o?hWa:[>Xt^'??rLHSbef!\pa)9Su]CcSaJIlRJA9*m.>c(lZp6?pSOZ,ebSmmhRm`"%h_f#;h=KKoSg>2]^434pHZcp,?=)CW4,%ro=/En'cT<Mf44S4dUl6lGp[%N>k/mOG?;XIDFZL8&13[r15.hdid?j,qZ<sMi[(H8/%;t!J*V>-QBDr/i9VkT^`DU'eOo1j4)juW^YIB7:+nYU5312WS2hN5&*MG-':m-&O@gA%o8er4Z_7=f@$HDgaS^O15$FDB$e087Vu%^J7_UdGg]k4/FlUg3MNS^:*XX4$N,dl,ELhg:,NupHk-kF\44"p16\(GZaafMq>t(_`dbhbNFTTSt1>!X$64Do]#]5lQbe=.b`/5%QX/k)@==npVcbm'RG$9Gm+lCSi'X\C_'Y@`5<\@^B_E&-QP8Uuq_6R4e"a&;_u89E?-c:7:1!X.Vo6>loD7iD04ap$H>?)rNUf^1%:630?.jqd%G'"))cu's!=/pZPlpWRnVYbI]F"*qYQ%P[!>/r-8VK_H/^lC^iCYq2i:$]WCi13'3$QY.;iH*RQUn&uV>P!4/S7\V$%Med=\l*B1qoKp+mZJWBkdGORW4)NJZ2gM=GmA1:fVf/+Z$`qgqNP+.d#a`6Ejjl9\!o:l-Xj[1UjV9gN2S2ZAh?S[U\h,#,F;VmV%\ou:[NV[WHGt:"C^$oo(HCj_1-(RXKSU+VtXeG_89QtU4d(c]&:U@`X(@)P#LRS)t2oXe^f6K((#ISb9HXC"Cqru@n>kun<dq<C`%CUE2Qg1C)roVQ6t["^T.>tX+d^:@jrVhQK^jS5X4(TV=O)V+!]f=a@\7e(SMmC)J]QEkc7[K!/NcMa8p=SLuuAbL2Zn#+j8lF,.@%e&R[3])QK"`/L+J&,F8Z5-:s#ftEBg#5bbepYG7NHb!+mi3Xn^=R2.&jl=0G[FaTcb,(D1]Y:"E73>U/qgWp]>2)H%p%\H#o\TMu%pX='*e,!D.:L?:7M)51\/r<S710aMO>/QHIf(HbL*[oanFao6:o@:m>CqnQ-e$Jq\Mg[faa,_:t^7QGpgE5MU&rTO9*uEN)I&cX,%l-2ZXH#8#Dj3sj[=_!qNRZ)**Y0+H5fA4EUs1-_-QI";AYbY6cqi^%6kA.Fu5-=Eu2"R@re!$^fNnJ>fG"cV!,T137HKDrVJIM-S%Nr4\F=Cuk>Fe0jCY%[e]Z8ZA?G^n"a!\L&=6(-Ii?/bJsnsm.5ChlM2K8'UG\i**V'3GjI7ojaBo%<7DR+;eScsLc[oJa*[g3d-*%lgu@f[D'X]g<?\n@4LPd9/E,&SJj:0chZ#$;si^ghbM"EI$6YOYop5,e*5U9EI%A/SJHgJC);sV#J.='',Q3p$a[/qI]#%!(S.QH%i[*!ei,lH`f'1$\c!H%Y[L%1Wl.[YHrqgdEq&i**pO9$U9,k'YI6.T52miRTP3BZ!Vc-G*s$-8?F^mHjW71*<hbIlZiHIoFITs9,%VT?0iWbZ,=oJ\rG$d$_K8f55<<i$^>qgC/XRIBn7l]\#eqD6_bDClL:o51"%bH@]=FhU2<EulaVCh6ck2_MEQ3uoi#[5>4um/P_<%cPLUa=XQ+ajni9TKoN[:3)<+^fm=gUd8=`5]3eHD\=>D?=nPK&msZc-jZf&lC:jWe!b2HZ[Y4/NF.7<,e5:VqZ^4dBG#M9.j#e/5%o:"?h5YdGJG(].14kSmS,oH47.0*sO5hfI1l*.[gS)XJRVmGal'GWPDY]QO.U\"dgaK,"cWRmeLm/;r1"c)`sRKM)'>#sdoV*H''%UDufn%bC3RPrKa1FRk%pSgEtkpm[c@bMQ:KkE,],4+fMB(E\CXhi-K3Om?+&%S?/93C$^*kH@AJP@YLQKf+CJ]U8J[kt>b@N4Pdg%elP>h/75U74>PBeh:qCn9>7=Z+h7?l2>M/`?:fOQ%gL4*WkYdl:!Z/8l+'U!Ri\u@l'WHe]'7st0.9(?j>I%a1=O]VG5(&tC(tWZ%nLUT)faf\s\_:822_3@*c$$j%8aC@Z=hFJ`3bq#77[[2a5NRo[M0eo8QL?0m*(XhDK<(X]$ZP4!`b,&5GF?i8o^\t>&js>`%-S1s%F4UHGMIdXSo</P.0Y$FJT4qK3bKe/=4ZWdJkPn8m8H$6oF)>V)2(,'=[&DHCQlMDo02bd;JR+kdmWI]'_QLMeWt'NRoAR8<E%Yea%j\'ler:mQ3fVI_/$a>T]l,-iV#ndV@./<lWl5-2,FT_CP<j5de:<pe>!op#f1j=;,ChrdMd>uBia_b@eG"#iq;rVG;7n_Z:;V3!*%KnVBI032R4g=J'5L`(VOLh=@XqmrW'kU?&794Y=eHM#^&m2's#m;rkI*S#PX4((V(m=W-eo&Q=%-VR&96g>c?iRCRj_p'<7q#^_W%@538d$s',*",dcRDtgWuP@C!Y2i(a=6];CRALM$T%V=.0i=7LgFu)+7)261?<;3jJp>Gn%&o4si,EAh]?AJ>kH<lACF0"i#d;dq?%$]J`%=#/D]T^D!:Q,N@eoFO)"#dAZZb3&DQIr&+3Y.oH+/Q$-WZ!B/rp]&k=T'K6!8_`_HkT#9'aLB<&3>ehK+M8A"E'aX_83"FL%hu7n^rJN`]9iQ78GI>$VRVQ'j<`N2SE#Aj]-Mq4hTSZH.4"nnZd9$/5Z=S*#Y+BsJ4P#J</f="6LdLEQ)8AjH:IhI1NK2Y^4PZ2V%<1m;_)RAJXk%)]@<uhknH*r8nIG0><qUG^0\QhbXSW(4":\*-%LOh3odndHWkI2i65_i3h,f+OHA=-Egd;_EhN>=V<(+/:qKej?l%3jlngqs2kNBXZ]_!8InaTWc)e4helV;a/fOdVH/*G^DnYOq5"8IrF:Dn+eLme^gpKqleK)5T+=NE35!nLJCTks)Zn<J(bjB;3TQ1%Lj,j^X<l8)9mFTlPN@ib^QDj(^22:0phbtdI`,Humd\jSg9p,@=\)$8&oKX&ZH_6b1<DF*,U^(e&q#I44Ph>V6W463Y5Z@OP2#J!%\D,WJiO,In=)S&@ZfO!12eX<289dDdWA:harR\'c;`j>0EsnbEF=4P;\bfhc]+:cM]WJA'$9IN2R%:nA:0)JCAnh$H';_o4DMllL%&%[aWQ6u>;VD68<R\KF"F!pMqpLdoVJ,7k8dVDX:`Q!p7]%BE0n4l=`521@noPf*Jd)PPG4+[3Qrc/3Yo_1FA^=P68\V1VWSb>gL%l(*M.>^O&Dc&GltIM;<rN0/Rl_<SUB=dklcUDq7/Zn*_;;617o<K#R\"/@'AcXuB'F_W:B;L\n7ft<*\I.4Y*gXU42HXB':@pSfZ%2J]@,(1$W71cE2/CY+p:d*+(8I7_8U2O`aPokp\185@_THRCH59R?i;'sC>d<ZFi*Un,X'T%E^@)QV[*:<#]fpOeAT?*#X.--f5.%;k;#>_^7I;c7Ou>L-=/u)G:8Jhskgp&b+mekr"_ur4MZs`l4A\mI\Tm&4J\Zd_*B]6.&jf,b$VFf7-Ied@LQ"k-W`3,ktt]j!i\e%cPn,dG'8c*:Z_#ND_n&"ZtaFlD;qltm7^:&L27[ScL_e[X\=6=b3b.t%9gBSjDT#rjqc[HJJo2Jp2-#uXfi5hAJDKEW:"Rq3mWn)%*8%V7Y`?Kr^%e@l%/#k/2X-ahs4):[`<&7ARAIopSXYGVc7O.$fe[q=e.;.,etm/NpfR_6>.')`;\t-*hbHD`^9\Q__b`GD]0L<c%*=?rLk'_V=oh5%Nk2ho`"E&#k[VFcT1qls\(NjUdkk[.,^"T:NcTaI]>2q\hhUe3mC_rYtnG,KCrFd-$)Ok'IJ,Q.%(J`,lY\KAk%["c+.g6kFE=06^RG]k^ZmBjt/D68'M[A0;,gi,)'A.%r)a4/nK`XCZ^mtpijK[.LV$1t.G&'OOdRe'Kt_s!<ghYnM",^LrlHJH4T%*)'kCDV4caZ"["Cl;u0^*pm`+@`E_N]5AqbPqJ&PeoK.'S<(0Ch5'jo[P>X>e\dr\dA>,/_7i'BO&qN"D%>-Pf[AniUR,<?K/"Z2%%mG0JkB2-SFm/_PZ_ZJXp,H;!:1ra,99")Nh0<^2?\`rB/A6<(cMf@G,W'#MA0OKu%jG'Fm@]dT<Z:9`ln:ghho^tHF8#K;Sa*a1%L(9R3aDuA)5J*B?rS"8SfJVT#\^O@;f"XCrHZ&6(S*b:_2psX@S(hh=TTdSOe&TgL/iF\8f8(8)Et$mg#Wej)1Phajr$Y(^F[ca6%(dg5CJkefD:(ouR3eFL]oh?#c2`cPn(+hL7%,L+Q\e3>A'?/=XNhGEG_&:2<NIK0m<_j`'2fs"S&Th?cQnjD6F9EW-A)h(_C(A?1%,0V)Zm^,R?h*1>aO['@gQQBFI[Ie?rGMHNh(GE2Fd#lZ@%(k&SITqa5I4`.9[d)XsZDCKDHs9=#NAJo0jd"PCXiH<F*l$2P)!pJD%UM&VG..o[9;2pS/_s00E[e5W<SEi>PL?31F]_%igNQJf^&c"E+E]'jiD'<s;b="X;]kGZ6_\FHlp.Q5eokPaQ&FgiXFU"8hCtrSY%k0.43gT+Y^?Pkr5\XpWTF\g(M%>2<WC!EQ`(e_);f<n=Y9,\W5eubR)^2QouEdOT<851r^VhT"HU)@^._YkCR]3rUq2`;b@+6+Oe%qpDM>3tj'VHn)bXh@F>0$fsc"VB#JV[qF4LGhnr<X6hOob@AGeZZ1`;0BMq_R=sFFg?LMAL)[2L:9giU$;=#`brDr4@TW"X^>Isu%i$X?@q_0Z%j[.4*eK(+0*<\0%PTKOL?bGt*6<C(f[tSL=YMWG(ptf<[+*[#dbguIQ)ol%Z*#B8EC,=AQe'Zgl,"-p8Rua_nPXuc4%^Z54;=P^bRjc#0.'CA$*5gdk6@s,\-EqA5.HJQt_YMiU@'$8["Q6!:,%]`b3W'>%+>E4`1CGaGd^mFY8Nni($]Au\FJ)6/Ih0V;L%4g4C8;>*3@oiCdt)JJsqStV!\WDR?"I9)>VTlOdLTsrEoro->7p1&Xb\+)qB\WJ4Q7&>#SEC8K0</fVfQn[\E=.VOId4%lRL=E79%Eoa(G+]nZ>X^=5g>ht?\mGrb89kN6r;3aOI)A=5P7!6'cU40Ljo/"Ht\,)]kE8E\<Z%$[dB&;b^ZYOjuSU$ejO0LOc2,oG#/MNke%VUhSI4>M%/RDf"XU.b0s4J%IjQm^@l9;B2L`s9SCl;BE^a.Ql@Q&qeE=Cc<U7:o.F23NVGp9;Wj42*H.3>X=Xrg:\LU\+N>dp$@]%JY`t8*>=+"S])d/'J2;X70[16%?!n]7-_;W4>W*gVU`tA]17*@^Yg)bkg=r#^Q\Q*n"E]N<#:kh"C\jqDnM.8S6gQRHD/Ak(`eh8%rQ]4A)6b`[*\PaXW'`qaZo#e#[ndjp)'.?eImF';[rlD:n?F.gL"9qREH-+743\7^W,c-K:Og'?EHNaQF@;qoGU)FCO\)S&kuG%N%86<J0_mr<hoji.sk.SqmBf>L#prY.8l:/h39qHk$/Fd[r?I03XAfVC@7@_="nSk6c<+d!X#HRN^-a6*'>Y@Q5c609ra2?H?U"h_f%Z]9fVjrK_C\66kiNQi(iPBaUkNE$KjbHo1*20H1,CE5gK9cmLK"ue?188>0m'A4[9p@3uep8sZWjLDOGqB_\5%+o(qM<Ue_\Xg-J%X5C7S5&hj=Xb]*ZmE?]9CWM]JKFe!*MMC'#DM-TG^U'qOe)Bi0pg[mVj*C18R"]2n_G4mm_6[j9@0f%p<eY7K+Z2/5X\9ZSlTBnT%^@sdF,G]>'pLO,0lUI@<2ILE8ZK'CGO%erb,S5!3UE:9kgJ2rbi/VVW?#J62.=oNO6`XFf)qc-rf7n-E#X02ufP.ERm3>Nho4N1W%;.K#d/:==NeG&.`p';l0)3Odpr.dH_K/''K1PnYNrF7_tWG#o[&ZLR&Rm&#2Xiqt5(%(Wd"5Qe1g\gpCJ93/5S_2%tH/5WPr>6SL%I1.'gE:%a`etI'LcTfjQB,71[Xm7b6:q3jd/aG2N>'HT(YFHdN:?NbZ@(?5.-sV[1iI;CGf5;\rWLpj@,oCApT^sOl$@M^*l)WMc%,CEc<gDl/LMu#J\TrG,[7BqUK)3&cO[[U*J)+lYHl/dMS7XrhW$>3=]?6\KJ/2)B^HuO-_Y3pFF3h.O<E7WDPp(5M&WlD0KIF#%s%Qaj\Ss7>[KZhJCI/q!T1]i/4Lrat?8eHaj\2h!=kjkk?(Xa%Zn_m`ris1Eej07S"hoB+tMF7\P6*>BZAr8"WQL#[KGXi77\Mq&Sc%"tds:.)"o+4"DCZHD%`K4kT/miVgCBpoHZJI9p(OoA$gX#WqY;?rXAba,SB*7QXC`Nf(&F\Gsn2pK\kh2r^UEl]q<[1D]<)lD_)+%21s`/_<65RRBR8)G(+.)YZj5'I'd4@n+'%OKO'&c_N4Whl`OX)=/2M8:.@b+I=(O\o:pg%++=.@p!KP^p%TRLFFSE0hQ,JXl+QjL%^&5>)UCZZ&G.ahs@-sog-bI\XomH1JgN-h(W'+j$n+USE/3f6Z/F2*;>6N?#:.r10oD?&>:e03!Haqk^-.pbO17$W7d=XZtbpKf1%]SC7NC=6D.l:6mfWI(l^SJp[]3mQ&=[+AG]P%uR0dZRP*LNR<1-+Sl6E3H]r]1@s=L?+kd'DV6[.j?q#YHRtT)H0&,F*qhIho6BM%krZWL[0CqQqRAR2NEg3se;rpF??VC@$P@Nm]CmgA2ql],Q>!k9fjQ4eVJFW_>V47S7FUqR%l7cR?(4QmH![A/VJD*d4)<neG;NTp%/\^&iI[Xr]g9fKggR<V.WbAuPVT*-P3C>XZ)*.8@d<'7"1nIdo/=N^nQ;6cCZ\bPpMl#b(gG;,P?(7tP<FDG)1gSl$ZDDcBd<'6B%NV4B`9f--[/6tcSq'i'&L:d*R6FWb4enDWQiH/sGf$SSVldt,*2.\UMZ`12eL!LH-f-OYH2O^fKN(js[f4_10-U+;=\hhU``6iZO%A#s8X:"LFj4mQdm[KbqG1QJ>J].Ial^s=-lY)PQn[F\PLduCmUR8GfsGlBIVBY(Xo#h&LLU?TZdEm5r"Xt>sBZQA#r$K-5,!,M8H%-;*+D?,^Th87f+c8'euK+(Ge-D=Yr\Y$*_rY?*[4V-gaoR<?3SDX!nQ4T/GhS7nM2/Ccj+&X,4UYirV$C&nY^;9rO=C36F..HjW7%Y'r*JVCl;sW)F@p>oqOmG"7Eb$8Z._7[.3H+IV.sFcGTgI/C:E&Z$;Empc]oO1*:.C0@;=h+_2;:?B%O.?^="b["k(\N@K6Q$Sb,%l\acg(J*0$6"73NE[Z#gh-03[pthpkbXa6aY;1<3/W,p_WQX(").mua];a!/8aP3!6?iA\O1sM>6(Y.Lg=(<=,5.)(\2,oWV=/V[%aF32Q*ZEatjhCVuo9KUblGiZANn^03UP&,"dK8;VOKOX7oA'*H_epi^hXQ<lPn@nh'0)+_Fui?IopsmA_A7Rq_I><m#Y@rVa4ut"%Wp@B3pVFrh"1r=):pd4Apk/>7L8(QbqN(=CL8)]aH$#*jChDB[PK:f/Y<l&_E'ua+]D=\FkuHKGXVKsNolq6"OBWT[A8dGA*ZrSN%NV*X[mA^37%'4mTFZ?W!n^lH*"[liV.:gYLN-a66QtbF-3L*CoVK-Ldf24`]/&PH"Lr:8+TH:(hGPP&WSUQtuA;\]\4Ll^lgsl>l%=]I/O5<S/D,49mQT2&@a]'K&!L"E1;-`!#)?C_b:1P74Zda#5MWhgGS#hq*S:?JVRZpu7V6oVd%X"DB]=cYh&?5E=8/)7]1b,uY,%B/kVtc4suo><Q,C]2=]O;]J06d;4NKR8h<J)c+te;VneN7(uRUoZ(o=KtDY9;P3`GZW+FR<UUY[mO#,Vf/K`jU7\:nXF:$lLcJbp%C[]&BC2CPM1Y5.DOkOni$`n275%`9tNt>ZC[l#.OZ924Dc5Gj.:lYgg1R!(/]2:duChu2hZ*931VR^\\-Fd=;,k:8=5tq,U'Ehl^%kSRW0)RBu<lrpR[>L,"#5!_l#=5Gbk;8pNNKJD!^3Q?4\Re#dm)9-c4WE4cL8@@9Gb"GBU:1^%?VSt&mS&4o&ou_oDJsa,3Lep0Q%"K.ea0KcQo]MiA&D[;(LaV#+j8.CAX`40[p]!I8[J!mYfh*g?GGq-GfYns`>:%a*Vhe!S_qP#c'e`8L0LXV+&4cZM+[rKD)=*6^?%)b,mekOC:0e>;#!c_FrSXT\t<Z!Xkfc\[+,Gh]k$AEun$H#r$>o;rBj[i`pJCgC7nr8c#0GH3b&[/5BKqfWHUmsIeEYFaVa`l"ZZ%ANR=beUm;Y?$iA3>)S0*><'=cm)9'DWiFZZ]<qD!77TJqEd&)Ocen1D`H@X)#fDR$\mk^1$Q"^kbC=X<iP"[W.#m?dcM+\eXO6Hi%QVT\-\p3PYi)<\t[cR!U+3>6Epd(4EO4H\I:)AgQ663nL&`pO8FR@UugILEB0Yu#&F1!^7pW_>T4hZ(=I*hE2r5+&r\+MB+@%.aJ%Db#1spL<"XdG9Qo?FG9Hlb8X2[F!(Y7j!_j,C&BSpID^%TC12k]BHR;nb4p@P7>D,]lI\Z^A8krV41?FF#q#jHFIqZ7ZS<d07E`*%*S;Wsq1WMiSc5q7>'oPYF*!#*fJC+1DNcoVfeVFheZ,!rGF\$9S#Pd*c+p3](6\*IUg_lTc7WNQGB[f.:MA5P^o#R`<G#Zlm[2-J%I4\#pUKso]QYr`W$[pt',VEc*U@&qf-`;bm)rmV@ZS^9P5;b(,-68_f=sNHQi[Tj,>oN:^C7^dKP<P+qf%e-@:3G<J-gMCBbAKNr%gRfYHfESn?IXQ@8IX/Ui>VkJXWW]_XX%2I@0fIZCgTsN/pgX2,^C5l\U6.p6Qi#Y1]\/l''5`Os*(h)mVI6n,/*i&_>//`SULh!-%72&OKdjCc*b8&VH0/cR@)9rsU631i1O4Bdj>-:ubmn?^LTUWgbbY1NU^XJu4B>*u(J@ht*bVrS_bLb9jf!P%02q`16^.t_dq(^qq%n>6%C\NJ;;qe>TC620L!A:\8Yodlsgb;MDEBqcHFC8*fqW_8?HQ]JbRCr^%^nQM9DX1l9L<i:,X:r"_#H\?G)4BEao!QUH^*j^=S%k5F?.pctD,S"W^2\@'K'"HADAU9iL2XrYnlK<%[)@q0"oq@Bl\F#i?@NNK*7d>[I^f,]h[KaY@]LN^\_(^8PN#-`:mP-+ei?86sT%][M3q!VVKR*4@4j&d?oH##JqlS3.._D[[amXj7sj=PG;M1sDg=lsrtDI:E73@qUi(%.cKJDU`0t-B/)n)[#;Hj>04*G'%FH##O2Y%8q2Rc218?9rY=+`.E\R.nin\J2e5q`T+pB+=-7>X7JS3@A@-kBI8R_hKbgY,k!f*#lQcE_MXkoA8"O9h^0^I_V^]cdXU=8khUs>>%7H6^e];td&T,[(h/94,NXR"Ig2q6?"rRB2+O;k4#Y2<c=8nY9l2nH$HR;t[&eFabt'l)@=-a2jf^A17\L,q\-^[XC2(3TRFH\Qdg%eWb4T`^OpmaIkW#Wo)UK6jDJm\pgE0f!&GM\ZT;A,=>K0c;4P;[BAEN!O[3OSu&SsCH1=PXQKI/VK\hPCG+g,eFacOq9.ZP:Kc:f%,bs+)/iJ?nI\Y0)'4mgT;:f`nWnZeBI>5=^D./UdkY5->D[%rb'@laph$WNHZ`*1KqEebrG<=7V^,I97cW\r(7FY::rH*1:BSsBM%NFNgUX8:@eG"isJ')B+fA)gm.;V,i/<Bn6^Vl]2Cg>Q4(UeXqA0>qe:mDVPdX#&B#)a/a'_9S^Vhh\U^qB_\04hd3/Xn8d:2l<*M%ms9@[eb/O9ZlYi2UH+(oqMg;X)!c$c1hg71d?6UI*mC@]?Pa6&2LL^5[eQsGik2lp*-Vh3eb'l0hd#n"3."rGqJ8*u`O".US'4I!%],oi<NfUC/2gmj'5!_m&Z8W3hC.qZcY8NH`?!Y46@=+rQT0s)^?e<VZ8r]i$3d"`Cd:,kk*h0[Bhrq(h;eKsQFoA2Ep%>EPf-B^+%#'Kl6=7r&m*oEB[E#[;I\?=`BKAfg15P:;@lM:sZP''d>Xt44Lf(C!LhUUOnB<LPZg<lm.;`\u*^Qs"><W,DML$N*tn*G5@qM\,i%o@0I8:/TUr&?`IAIV8?qCt/+s\Kb&WOQl',N>;pkH_%mRhroSmbE8^*lW50=Z`;oE4OuTX<P>PB[h'f?ba;()4mVt;P$t5jl_dg)%p]>(rFD](oCp3.`RQ6=ciga.:XRQ1J(A@6<P`0ecBtMDU1U#;@af*kMQ%X=MG"4XN2o6>G]?0HFE-l[!b'+j20=E>,WMLMg*./,-%'5cMhb5H_EX(e=*Vhfao:-Y?q[W;9#lDo7JUQ'mZKfk$5WcK!F?G/4PQG/sF3.1DTUd%*$hRRt1=7u(Ib0p..o&@n92l"&^pMO72%nbZpIme-I<.K/o,qEe4hhYZ@$r?%*++(&?eRTh2GJN5:MmMlZ'%"=ekp34cnRub9G^%V!dh>I*3-V*p:+4$75rkA1*`j4:op\^4F%GJ7<Crq#(&dC#gS5Md/?(4KTiRbp4$r8+j#Ms8Z-^@:lt>IToJJ%kEpI!^9`ae!p@mC`;fal@$s#-2[FT1_BHGddH]\p-Bl\U!@M%[.F%Nm:\HYj3c2Fn#E4VVrdMSV\e4N+&9-QY9*I0b9s>l2V+K2df&ID$[_bpj6,[mD^[MF?'*_(@2`%%0>7:(s(uo=nDSR>e@l&2%l:Lu((GDlF\A!I)D6eCABXkhV^q-<XcZP85,8up*0-39dnEf8#Wu&PMgt;EI0qWo%3<"0j,9f]t]AV%W^Xp2hHgk+KqitY(ce[6!%nmioTGk@-kr<M6F,5_,SnY)X>fMk.X_;;2H7V&W<*j4W5S%n,%[U/AA*H2&(c+eED*TZrQ5G#X(na"NUf/HGh?J_Y6I!Mspr-J3o%VX<^"h;`,QYA`dhk<;^(c[NB9V0qE']_\Hi.-$4Ef.ZTbqoPVEEUjQ#q8SugcekmC5<IN8:Ggu7`rcJ3Y)->321+kW25b-Jf+P_.%hYn-[]TEX=h,!PRgQ#u;MQcYfZ,0AQ6u[$lVdHX/0nm0B86kN3:BEEZm_t`VSaGKU8^6ZlX'9?I^NZ";DV^3%(-fQV*PJe\s%rZ?%n,KVls007a34IiG[''H$VE"-rf[,-C^A5nN+]a*F^%hcX"nu%Sp2oO$5Kp0XDb^8rPPOFr\MrICL@O->lOd79`HZ<L-cI0:U.!nQ%`-^)WiR`jrm15gi0s_DBjH7?<`?g!e7\gUMlXkOSIO3!$)i.]ZM%?fG_R)J5boT&rb0;-/p!4#5m8_(?1L%GX/?^!`s%h.O,g4fB%?^@m#`eF/^S&^.W.lSLhrk6'hkLR2a@8$H9bg!`Yg89#L9U>ErrbOD`HYiOj+7<M+c/-Zn4h,aDqq'$^duDD_0E/<Vo&G@YfB#RD%G&m0*ml/iWs*;?k7iO,<Ui)qj0kq?0Xqc_0l(5*M<$kf[2o,loDn#o=4<e5!02uY4*rB05loB-ADtkdS58e0Eqsm<R^V7',^-1O/%n8cF[q_I_,WI5!Vfmgj[H^X.`D1/t)IJDno'lA?o2j:MrH#ETSoT'p,narJDE9qF.+?9m_F6Tn*hj1^Chn4=5k48%<7/,kk2n,Qu%P@9'lXOk'4H[k-H\L;*?fa[_m2gb6/^9#K>]Qs#/PX]eEYjp'8#CiNcX-6mfZnsbM_^.(U*n5#)UgMA%n!nY"ol^1YBpHut^K5\3%HY\*'?dh*_,%(KgLu>Tp?kkl^I5?D2^:2KuN7j-eY5CZS7A:AeiWo?*?AlP3o9<`R:>jjg_?Z.TP>'E[5cDuYin<2N].Z*,-9#9q%]k2KMebpo=52<^"TKdK*TKnT&52@#1FS3U3VTB\OlPikig"fmH9ZZSgXb#Ro,<:oGe$d<3\6kTf\+0?n&9t>k.kcC1K_%_-D+BG.%N1Jk=ELpK`oEu0oj*:ABogoh?\r!hE[MqrBDI0uam90*gZ;eM.KCHn5q=@[km7&06^2EoIH0*dQ?$dl#iUm&nc9c1g3]`mM1n$B`%G]:PZn]t,#W9bR8;O:qm[U3BJ:]Is&.],5_6=^Gj*RQSZ`?#s(p=JP5*:_XYNm,07<L`dlMmhP`o')j7RJmQQ&so&Ad!8sg._M_C%OB;qNbK?lXkm&T4>Ygo@,+0AKU5k\uB%^a[`3no??G+3H&]Hc#L*8k<i)cKeWDO],>s(/>hPcOfpZHa%m=;W?+8Z'r11.-./TgVh%Vr"*7'gH!uQJZZU_ITXk?!H%Z.BCGtp_4Ha$S0i$YIpd`>2>l:%G$rk$tlcrqEe0>b=5.>hrobRIX7%kU9P,I/%RIs6J0Md^4>u?%f>*Z))\?`]o?rDPO'[#fZ)X8NJ_-A.hhSVn]!V*=Hlppd1bcBmZAHE);].%_V;B.UV"Wm'C;4Vq[at!(Q$PT5HI@"DEl$OP.8N,r%p#k>[(>B$bB7FT^CJ";#=ROZ0]6?/KcY]b^/q$GI57#6TldN;l(sDJjrR[&*YDk!25J4F&s)l"`<EQ:\[T9#kNRdm/C\;&dlbD#K%ARhK1q;6$Gg910sUHSu'[2_<tP'TW]H:O.k`f)5:XsE[+-BVjf9-9dfcuT(ajEKbAJK%kMID-ts7e?TG2jaNN_SQ2GY>t]cpp-L(%h>=\tD7onR/i(m_Vk;T2p42s<HL9sBQ4Fb%nbL$G?P0WS,eB?ZQ^f\:Gid<`!j8`MYCE)aYrK"U?MsE@G<9`0?epS<IWIY#85!--%WlmWl%o*C>$?J^Q8L+[h/a:PGs5DFl^\o7](:\h`en;0f/IP)*h*:?C^jFum8e$,'n?VsTXT7d<^B@GSc\p]T,13+XnpML\H\o-.%iQZsmqr+P;o&4r.c=;.0mb-=5AF\ptJm]W0X=ffWU7I&OZ`*Y<mlpbdRlu/p.^g8fMk/CX]8s^W^c`8A0j2dTI1.q*A0>69Q7nP$%Er:/jH`^HuSNV:BYpQ'Eg0F$>U""#R)n5@ekXK6M<e"`+7]NZ^`eDl+=.`guR9tAWmZGLjr:P'OWbsI3T<gWT`N+Zo%]l:VNKu-q%rqOI5@;B%2gUdMZqg;dOZ^8.13<39=pTll\h/45t:$bZj?bKkMEjECVriQ,Jq37S0bj&XjYG9('"2rZ<9AU`YMk6NQrVagGrGMGH%n%4pChIF[>b9-cWIkk?bpu'3`;N-c)%:b5m1nH3NQ:*=YIXQjprefHlO2!ae+rkT8F"p>(k2OW2Ml_KF?O]\GDjbelY!Mm8<Ndn!%!Pa*O07/^<=_`Ah`jlBS]X@:U_68Eg2ZKja>%L<k?G*q!]?T4p^%UgL*SJ4,+8k)sQ.rGWbC31c@LE_mV5mZu'e1-EeP2nu913PZ%I(=NMrp*>82A66GM*Ce7VBpo-Q^4m@n++[8=Y"'O+H8Tk._V-Y<Nb.RAmk![D"sj?qZ!_D'j6gJQ['P]b-ES\2]ho]55KR)k<GU<%q)Z8KGBn)d`iV4LqXrmXSY&DB:QGFh?X)CtJ"I^/rAB(=IcJH.c!.["D!U<SgW-(7&Y@j52.!]eR(]'@L@!X%XdC`LriUFZls4jX%jo*cfd>P'j;O;O#j`Kt6\b1s$7ro'B0)p37i@)E]DXI&1O7DOr#fhC)_j8erZq9hR$X6+cDuSU"]t=<W@<H#W-Th=3rI^@5Cl](k%??QX#r'%m,q<hS[\@?VYg)Bp9\BaYf;koS>H<YTOBq1F#?[nSMrpu_t0V4ui>;VY(>NNl8[H6`+J_iT"qXFErF/t(KHhbLdF6bd5%O6>*^*pfG%q/P@@%RK?<pYTAa:KFS\@5GW6GK%j3D]sMtNDITbS0[)AT<>KE_\-6W(@\cA/8XgZE+E(V5Q,r9@Lj-dV[aC?H>*\L%Yp[O2\<QA"gVhuF0E#p'MH`s1nBp+i?^4R\lfTLOTQ*@PDI.=4fHcarr`$3@gtE$`THj?uLASmef`0oi28ece=UCJpo'YY/1B,#8%hhDm)iu`%eUtWOhAb,toepi1u+!/E!/'/^mkgp'k6ecO]C$*5A9+WUAhi;UFDSmbqad;Pp,nY_*['UA3Dnph.7N_DFOa_`$c*#.I%Ccls-H3Up[9UR"&(n;07fO#0U_gR5_r(EK`Xc<()rc.2Of>XXLIr:a*)nIi.ZQADDH$;RCYECC#iRc?$@U"2R"SQ`\V8;4.QZ&3$%X)`FIqVondX]lmNS?o-X`Bij-P6piL\HQcC4aqaoER+<u&,j2u?6ASk;-gN:pCC%Ym'cq5&B,abD_9F6,_$)@q=#`A>2;eaXZjD<%<LNg]UZ!QddXHJ[/["^D3W49.@Gh(T.WRbe$+oRlZ?U6dWpS&tO/_unRrdgu)@NnHGB\Nfn6"u-H(4X;Sp%4_1S+r4-Sn(@[m3[e%['t'W^K_FUZhEGVrH9sVl'NbQ)h1uEO)X3m?gVh$+0AY26X99RMS1%`q0gJ-34<m=jm_HfmtKj9E<.$4>8$p_FSZ0Pjkbk@.Im4n%A8D.o.c682hS*kpaS:Vq2lm6b'&1++CdT&FSW.eG';@^/6c)R>q'ltf0MAXBd]m+^]&]g/V%li0QF+YOp%k-HB2K+oep-NATRL_j%D;G3_>;T#rLricRjHZ!<QG'cMlR$?X8a5ObTF8C2IVGRd+^<YAEX_Z8j&cr-T5\lHo?,(fUTK)<2Ytd'"+SlY6#PW,CQFaS@5#4b%H>QJsiq(]uDcaB\jn!32$79rB$ek%E1:c5FHUcb>hNnH-CAHh-'>J<Wm/=2eO,A4qkkI#/m;)G/A>R1mg0;Nl"-7:Q`i6/Ed]Ql&%qu]:J:E_O4*+(U7f<a4fQ;6($VT#XWVRN,*kF@7.\e%PRg),[11Yrrt@p-)1ba\EVT<e,ih&NCgD^2>KSAo<Bf<g_\k"(fUXZ;P]%<n87Ianhll^lu,eR*,1cXeC\H>3Z,kj)=sO5bT:O`,!&LQVS[u"qDO\e,l>SY/jS3!T'(nIDEFQl:%h3[m)5^7O(Us_s*E'ptT,6%d"hIV4a>d;@uY@#i,.e7jVDXX*M%K`j/rF:0**,A44i.p^OuFTHoV!V:=Q38m_1Z^h)E"?46sk$h5.m[*k=op0[X7Z<Zt?%%I+)*%pg;WG5(%np.;&8PilPsJ5SgQ9aP;L0>@r!CmXk3+.=UsP+m@SPV^:ISpr_ifPr]"[I_KEDh&J,X+8?X2_G-iWAVh9T/YU:KPr_`S%b=WXK_Ud8.Jbk#1mCp08FHM;-D6IIB[s,$Z.Qp(GH$:XWgM^a,T@38_h07l:memEcc`.`9GFp35ag5qI[pY[Jm?,A9/"Sr7[I./_%mhO$X*paD*,=$iFqXm\gOr;_5+7\ZJ1eZ!_f7EU,\2[T&+W#Ll`@YE><NY/k\3JoTUc6K(]R9?`q<uSSq9Jr.a5r"Q.GS67&;dr3%qZmKKW5V7G1Mi3-HQ%V3nu#PAD:7]6rT!I\c-OA"ml-inq"e50LmtSKhH1`MiP@`Rj*d'p2[@%1+84<NQ68fKLI^@LK:i^dqJ4"t%Sr)/4"Bn\ZdleOk?EfEFJ$M`EiDV'AJ`rA+Sdo]?)"[Das1qpHele@3X8h:0U=94?a+!hpSCIEkZXZ"O/hfNUoH\,F&U9MmCcr)*%l[As^oD^I+#o\6q@P4:`-UGY2J5_P*j@O=es/sXQVQG+oNo+`(rMV;XEsiA/4?iW7q`>k?hVLBkoZu.fp]!DQ3>^#bIhDX7IuA&*%:<NAXbNP9$kl-@J-%:#$?Cp'S3k+U%j2TDP>Q5]BqWHVbpHS[>IgOK<h>O7\[cT6fbHl-Ofurt[e=5YR4\^E0L,nZRp$h?R1k1/W%GOU*'Oo7!4nmD7T2Z<+u62rl^k3pU1qCA$7M!#i('lc+PMlN.O08^qlA6DsWT?JnC>Fo1.Ik1+M)&SPUs/5N6X0P#+jXH1b(f[A+%k\k$0(5&PXb5gt^?H=pK_*mCX._.9_+Z8nD#MfcEaTlCB`+#t3DO^h@]o<82&uFQ@U`>aa09q7_,_5GP*65&D;JFP[4\]3;je+$.%**p_8C(R<8[Kl,.80X8DRl$u3EM%Ia7?ppTe1]b5Clmedo($Vl^&D+L<J.ZScIg28mu>o@A5Eu*J'@r\*m9a\:_ms.b/@\!4D<oO%aMR,H+rb'4iCq-L0;Sp@$Y`Ro(TMKe=!k&oZj0fJ)AAGP&Zp,G&#ph5h8G_7k0&BcnS(VU[&U=+"'`M/S,QXf9h0)Z[e9U0Lc,YO%^`^qeT4IrE>YLWV)PHoLP<g'4(h43+L6"qX5F/_"k*+F+U9odaTrphHRHG$D)+(W\>0H(fk<,!Vqkf<-l9te2<?3lJ16(9SQ4G`L%&NNDGaCJ:eO%biP6MhuZX+8PUBeu-.HL8!9\[\AnMN'r<>:$76Zj7sPA<t/e'f64s/r*URZkQYJLA*Uhif['JTukI:FHBMN<^@\J%TW>%0<,nKa7Ro2P]4jHb''aq9=1$#prIE8"Tmsq+e:*PhP!#XF/.-2WDEjiD;FLn%oGsZdL5p@Y!iZB,)&)N[>.)8Y^M/D2k$fZ%%FGR4>WuU*^@]W-i)[$uf4b/]-Mh%2KTs;O91!"Bp*:foQ1`60j8IJ#FQ\HtGO1A#K1q'$O+)"C4a3p4%3SrO?c@&#R6s1ZM=o]*]%)?3IP.@kt.cQjf"DCX?V-1+YSL?L-4.IFKfZqUc[B-bT4/;LkC,-26XVuS?)BNe&-E9ei(;X(*dNQk>kjB&^cELHEiZUB(`qY"W4%iuGG%"A6@eR1Sk.Q8G=pehGDY0-)W*Yq_\%>/Q#\")iglTHA^FoPn3KU7dWqjH-iH<[=Yn$7!W4gJUp';UEOih]k19REgYtJCrs?%WtBIY8<mV4Em,%WrZ?HDkX.c8c/dATP[O'uNq.k4:R9$=^Ls:R?mMEPid!+-)9?J9&-8CNS9R\=^R&C-M9=9B"1b8m-toqp2#/8T%,Kpq2Q!bA@bX<k#7]Il6pP?+d7;38JN]FdC?-^klYU[YL8I#iR#9^.sHl`ZX),)_-[-nBO/KrhI@LLVGUF_uY?EP*OLau7A-,cc0%>%Hbi6Kb"t@U;fuS"u]K9!L,"N(tCa@-foC].0NY-7OZ4V]fMDX>$B$a<rsEae_!$pG+0<>Pd9.JV7],$GliEr10/%&FVlV$&Xpu%H@V^[O\BHW@aN!]l1(.^KZU8?+<[qT"F:KPdh596"klY>3%a?6Kd;:18hs2F_0.PMEPbEfCupg-JT_I8#Q]^Z,'Q4/&ClL^c]]F,%9]5Zp93SHVVj6*lA&DE"!sg03M:+(Ee!q'rX%IYhaWaFinJ%_@Gc%,D&LWMng,PtF,SCF#JMu/N=lf[1$N`qbS+$iG+sRDN!:27a%S.M-03ZbX.FPq1g%Fc,e(7bfde+-I=?nH>dW\e-0J]n.jTLIr9+rp!%0iQH5"d0IkAVBhB+g_L<i$?`K+_sk`,3G83+&W2qSDZ2:%$(M7V;b.65K9'$JBUp:c`["VS'ipoTLhY:N<bT(F.KGjZLmG=teO(5!;o1=s$")Xk,0J#C8outra!s`,`ef&<?pfV.$!J]%U'!VE%]]+]ed'+m3=(`^1`";G]6Bi'q%P:Ug0O;Uk8FF_>.1M-8EIf?%&f$EHF]FG\dC9m=bNOVD.F3%)JQ*52XGH/da&.Tj:fm5o1_R,`%r/A]ENA8V4A^O#`)gK+7%#6l>5a@SB5:'7$$I<0sVDKCE6'>AaolJfd'u!C?#+_*Nf-R76JI^,5@pWi)0UEZJ[MTFPj9[0m7O2[h%cP.qjdnV_kbXA(jP_#2fS/"?pd4GX!0d\0`5"K3SPo84b`o8$m%';7hCQRW\)^=7Y;1M.R,$>d*;IUF"ChT9j#Z5XSj#g&G$d@0f%9LtDCDAn\_;Gt7t/&6<cR.M)j.\TRg;i-c5+A_#@)Qt\iA-t+W[+a.9:ZnbRV<.N*kFfE9^*/%`jaZF/_FaAnW4)s]6IH.Gj:_\/%ObdZN$"bC%`)ZFFH:1GdGQF\r+k0#V(S\*dVeBl/i/F?UO4_e;4c>0h(dZ>;EbGS4i&2#76mVn/JA@XF1*M1X;Sle",4JQH4cc;*%<#C;X<+;\Yknk[=ls^T:T[&eG5tU]6hk>JW=??ZS@4PfErDNpE#j6eCWc33V#NS=*fn2+biq*5/A!WeOnDa(uW^s`2*A9u,eVK1P%E6^gs'("=sk]h=UpH>-C^q6#N7hD"uFWiVA=Ve5iNR:cQHHB84],o;Gs3hH&@B5>0;FEKS[.t=I.3d,BO&3"fYSK9DlDYI#`Gk,l%9h%B=`u%)"`G5sXR7p^%JI]p0E>X6R;94DM%(Zn=_3@$HV/a>DMkDAjj*=d=!BK6"n^=J9^e1Gs1-n99<iG7N]'6HG.6#9_3Gt7-%[3>cs"hfTCQ&?3COJp0>UW<'c7XQe#rDpUIZ/_/Dn1B?KFa'4A:A^#Z`4pNOdZteG8W5V5WM7X4>`ldRF!db#g?_\Y4idARNiB8r%bW&5Ef?;Bq^B'1!+K;h=_QKu:KoTBKTt1MH#spD>=ZRnn+Ub*"LX<`)AJTTao[lPV`,tR-QTef!f'0Yh1dn]=D1?$=F<L-H*s`KL%Tk%^8UMWcC@\!#/.Oq18*\eDZ9iLV0$DTtk++gL,>9lf$m*cjjmO#3gU<3PGY;,;s'2&+P`Sh0@-F>X2#n7OnP1jD`M'u4*]bo3b%U_N)C=:Ig#Qj9W`R&3C#D)tI,Sd3J8!0^e%/N"1;'-5?oE%UrHk,CurM*Tk8L/2O#o!m%>f2u?u4fB1\#+b%BkEqJ^>'GG+@/D%Q%$[N-X02j3q+P&OD($l$&&J3.gD(h(1oi&4rC#t%(O:!fdp(U46m2%\p,+(CW=C\^:Le>kn0sE52a^C\[lM@43bn6!fG;^=g\;@bZ%>[_@m7q%^2!@(p?WO&,3HjMfb2eP]<$`"t,0d&:c&mImU9_;7/p*B?BQB=`E+Te7&^b5,FKBt/V1IO9`?mSMqIkS5%Rt:Ud6Zh[)%CTh2FN.,E:9`:4N_1<=8@Y+lQUE=rb4Dc.2]KdrEW.mlS!\9t$--\2Tb8)*!P@EJ#TSV*(pb-cV</<L?&2>7f`--K,Un\+sMd/Y$%$S%*'n<+8IauX:%nV4#:?Ll^J9Qj7NJnI^HD$4Uhm%1$1Gp$f>>Ic/[eHNg%34ADiJ`6>o$Dp%D>mH*-+D&\N*1]4Y8VNt7ZHIS1%Mg-R&,:$irrktM^=lj0A5(XVTb%cZ\L?/<C.!Zt,VT-V#!Yh!,1o)_ECCUH_+[qYT9F`gr--_r*,rApt<h^hX+Q4=CXZMZCU4h\=%]H"\L4HT(_<D^o_J5P?'ocUmP>*\#.`6ng\<J?O7&.;&?(q-bE8m6hW<j3TAGL:N#`Hdj,6iNU4Gf<5TM*Si_M5jIFb47%Dfjn)'%"=;5h4"V36B392kF.U$tF@BUI7?M><kXoSKR)Q9a:!/Y0.n-$[<g7!mVe(ir-$[)L$k$8JLRacMQ'ci><es-[Bk=bGrVYlc<Jh!Z%j;qJdU3os8G#=WnHdoZ6mMTmQhbn,1N=H=q_0of1;0(!%>A?!2R5%#c=]_BeOLe%GTEs2a`h9s7Vc$]"_a8bZUu%n7'jED*(lLg;%YJ!#Vq5m`9XG?s(04MoFdhLC@)EHks7WBL8V]ZL*Vi)Z.&HJE>/1knna+2PO(MP2OU2sO@l)pb;9iD>Q8Zml$mup,c</M3aqC+M,%JKt@DSC'%bC1dCT=mWY0/_)nOF9(Q_"B2`Jd4-)&X:.#"P0MOq&-u_9*rSDq+8n!`=KP`>KT1b56eZr.=fj)JF7'M(7(Aqi@3gEe%X;N<<ahm\@Afr%(;0so?2NV(%XPQ[78;&4r%dnCf92TLk$tpe=VLiBZPk7WO+GOh`!+\Fg2AS*Xa+0NYqnTo=h`6C%_QT#39F5bF%(oO?9+KXN'iHpdNX9S2Ac"V@m,#c?>9a4=1'F.[%6(!Nu=GP\-J.,rL!B:L`-mG*Acg@)f&NY;u%RO#;I6"B3=fe2=D)+%a*2J%;%K^T'q(*eWRanND-2D;'+5?&5%R:4IQ2=F]sc#F.pJ@?J&+e]\QUZ5EAU2UPFf`YZ?[/bjRE#"k,qPabSJ;C0]\6L8gS>fUA$lEm?%+j?Z,#]ZQuNPRJ_fn/sOOETbR-]HGJc'^n=k8B+Z!/Iff6ms0,mbF5d"cN_1,3!3#gouU_%P3oe[En<]H'5XGJP?gbS$[s$g06s?%b.R#T<%m%-25m8.0i*]8E7lG#h$\mSqgk-)H#1J5%`V3G8.7@%d23k6!]O#SjBMHtDB2-<BGm!n+GV]_L>VSu&\TZ>pQm'hVPTQC%JE/GS^_Knk%s7.G9+CD2+3L:2rD,E7+@VUL3p$b#%)2F8ln2\;;jK*P(.C;!hQ4Mto=+l1ll`r&N+qDl0ZQ9^.@Fjq[Kpq];Uq0_%I5<TLTq=rYnEcMiY!:+:`]G3:==;VZaN6-[46^g,leo=Jmul\$E;h6mbraaW#2U5Z^cTH`X,1hs(0G3j+Vj0nXe84K?r<^gL:0g3%2*>eb.u5rl.l=IF'P37PRg=4W7B)p%E/c$]2.>qhLBNNEJD>-%6nAb)qnkt/.!j*qZ05.n=q-O0Ka*EK*7ZTt4?P"o*[;:kl:%9p%4&;4ZDc640+=h80b0q,Z:Sp+HW4"7#gbS8*8beT-MR4\R\GLCROgZCtMr3b+nWkk_=e:G(P,cr'"D8HSqrrfniMBH9LYt"NP[T/+%U'tHfN)ea8=@3oM0InP=)#D0P^qgKr+DV2A$&I4jAaNlQ>FT3X%L/l3fPQ6-@(<qq8q#2D=R-OW%mMZcUS<_?;_i`=##jROAh\pa%1DjFlZ8e5f9FPjI.d5JOC[6W]itUri#/eV0A"-j16ha/-=&K+R.roLU5gQ*f=/C?q')sh-i!C>PR)+_pn23"h_Q4W6Deg#]b[<eD%YDWn#fFbFlQmAa[-[\3)kL3l:$Hk.oVW:qq3[PG^;B&ZRc<H[i]58D[/kJ3bq7a4DlJ3G%*-[lhR-KTZf3u]Oj43ld"gN8RAr203%D2@!=6u;@4fY53p&975FnF&F)\>;@&<=!9s*%h>jHLJVsL:MMh>M@Ob$b1S\8J+b5QnL/KNOct#)'`]LiJGn6&6i*XSmn/@V*Q8]%p]2A[.1Ck;f;I,R,)>_W6?EDb]7cWs&mY;p"Rd5\H-5t^OGas+\F<k>aqC&a]G,!JL!Wm6p'9$-GlQ8)dT%-HMe>B/`TWDeB_Z`Y%DM``\AJWqf#E/p6[7+k&,:^Z&.)F/D5i;Ve2m37?E&)EW"q:Y3&6GY>GMV2+\I&W=&6Xbqs&9J8*-b<./nI$i+Rfes`()@d1pA5X%q6!KB"72)C^jK<U+s=n0`/-RidNgRddctL&"Xn@nWY'"l2c4JMZP\'M'>psD2Smh'*h)X>MZo,Haf=-VYCree#q<5KEun#8CM*JF%?7GtHEI2'G_$L88RT/(;P'q.[CI+W2<"^:04WpdC_mM3]"/dhN:&q)1HWgn]WM`8>Qgmlm%L_Y7T9j'2!72*sd1\/h_\Z\]U[dDm%B1a.(L62YkjX#DB(*nP!l4ETrYf_B=$3CPOE"5)P'5JkEV)u,`c!kY!MI]PoFc[h^!]S!#Hf0dO&E9L>]+S]t'=WgZq0"cU,C-FG%\>fphThT+n82c6NaEO@JFs[t^LLjJ'?J/fP0as3:+j<.WEKD(Q@d1$hKZ.>q2<fL%#sVBY#XcETDhlDiA@$ufgic1\8YL\Lr[[D/%h.")sWQ=\2j3?O?fHn`+?uH5@GI_sQ`@>Jc!m(T$JHK=Yg-#i@;SnG'O?":)2k_to@)Gpi=V<e>llW'cFHE@N&d:r`L5H.7duIj@%P#tc*E.7maM[F&N:^)@.8e>S#=be!f(hjr@T#,>a.0s.+e_D!%#)?s-<546)=%1dLPpnffm].-UFPJYGqL1J\S8A,`-[]KrQ8f8G%;%MnoEc3ENU"Pm_aDeo:nn9W[^_=G@PRCe*iJ'2L$`G&R&(p.K;SY.Gk'K"I_8XaiKk8E,-QI!^24[5+bVBK'9_cZLrGGqm#f'pP%hU6,&fioXejJ!K?)PF_3+\=J:Ve70_L6hO>dmBAO!K#f8BOmPc6?JJ%aUUU8)>ck%LL?U/jYS;=bT.:3c+,A>]=?iXfO4(*7:8:d%JKGc7jo=mN-;fp2CgSmIjO&F-];3ff4ZMXR)g9a$_IY+l[YLd=\/e")nPe_?7T/d6_gRT`_BoSQeV[qbN%00-b#bLO[;YYQna3.0%)iae0DVC(]4X:j\*72O^/Dsf*)oADT16BX[nXU&8EAI4gn44]tUuEk41%mOWGfInMaGrsP\;uZhb\/#;aLu5i9(c.l]b#3':nU8e%:XM#%mk3=X=_[4rd&@f.0P;=6$jk.Ii)u;c`i4s-@FX?l"f#Va'=l#=j&jL9$M.eZmum9/hIU1\mO`,WNS4h5,WDTHcbSp&248oN%<mkNaB;4,KSfe83m1.q?-=u%o"bNg099=^\W9?c(qCW@OJKSHU0g!I1Vb#=:,(6-%b]n^Z0\%g@dt%W3cb@-&@ukOse5,jOXGl39%*!?\Z(ced#8omueK/M'_DPeWRFq+m-DNZbbcQ=BeI#H&b.m0*4+I\+ZRc^kE+:X7HXhp#RRO/T;o0f]7I@l@Ih?PM-F(;lo;Ss8Q%SdklhKY]smN7cZ7@%M:i\S?]4FB]Xp\mgLH-IrAD"bN5Zd6X#)#]b%f,(CEf+=FIiR3[[OC`E00ib"6>bp4EP93B!%=Zp?7N(O(W%"fXqEZY,QQ`a,h;1uAPdHU>#4.aodE(4Hrb@r3386NVV&a5LEraL*'QaatU>89$B)@6)&es71:W8W8N&Q:\0u,P<^NiYhmGRH^rm%;M<gNr)AqH"GXd'5dPDAQt4'MMaI=R][&&!)E:Wmn5NtE`Y1R'8raJj`""$ar19]k>k4.(m'@ImK=M3i%A`\T$TT\2*@S3q*=`25%[&>&i\6?de90J"+PUrbq\8EolX$%^R'\Y'NMckA@YAPoI\OPV)Oc*r\e)5_#'hZB&cA8/&F2tir&5ol.?7Y&XF,Qaf%)1mo#&#,/%(g+2I<_DA&d0Q7ojj7bDaPb?pX5#7>WG#Es*8UN6o%.!D^a_`P/m$G#NlVfc5ioWh;R'I/.5TP4E>:&8&VsAe^tRW+1m"`qeaj';%/)c`o!cO+\::Nn/c'\u9@\"]OlZ8jjGRE.o-2]9)DmF=mEp'5]I#Ja[L]1FYV8:<[LfVW,-*LjPTVb\oCd<S')_`ecAdIls&gb_5%jZr0M?BcaIf65DqZ;?$>9<t9C2BnVkJg_Q\0?OL?EB`aZW)A3tY#L>7cA`KKF5/IFRS^ff_E+leAJ&=%PHSP#)G6SV)03$!5_:O[%;c$GIWQDH!a`dEaChV_..tWZ$\uM.[/ljGaPtQX'OC\M,A6FsBY3]f%'aq;uU?@1o3+3TojZ'S_NlD81QgomCXid(hMimRZp!RX\%-=rDql[^2%HH:rKe;Q,Y(/b_nPK+#mV(H.M@X'B-nMjj>%>,.bCtM?GPf7Ke_#g%"k(I]TJ<ON!L>1WtGni/a-d!W.1<Re/-l]B5%aqc])=NNou=W"s66n(3F;_?`WCmh#^?)O9G6515BPRYA4;:]5lF0N?XXu-GXM6[/'U+E#d9qhbloUUUVZmZ=AQl!#V.^;a'r]l7,%$)4NAoL=![X[Lj9g".%Ao^0RFE>TLnZ&9\5m05+tZFF$iMd2+E-*Hu`/^0MKUf392>*tc'9Wk">>AU-H=U-?PejE2q/TKAXCRW&J%<`+8a^j-:,oC*G&5,jI^Al7+i:5Q7t$Z`;?WtoA>PRW$IU25[u]M-f/dYNs-OC\M,KNX@]Bsr]T6<5Nq(#cf>AnoaF*"GZ4Wi+c=%;cr$&ibV`L+O5`;nDYu=@NDuoM3bj'U0J5+3TN49^l<T1PVoit@,WRC2susiHg;Fu9_<:NqNa1OHossGI(dZrg.BW#JebKM+?^[(%;br[0#Ifg5gdJgIX:R$J/'LW3BIU*crK3phgkS@!<,1Y8pS]tQdRqhNN)2W0Do3l?TW`b;RIf"9d^-lgg:J_umM+ZVB*DGX@+\br%:uX9<d390Q3ja9+RoW.W2B2i2j[">bcuPXF7a'*boCB4rb>aW-@`!?L-8A,Ak31rpj`N(<oBbunDigTBZ&?/UT<Z].']J.d+Q=3q%jCa0kq726br!Xj/ZTLe*Hp_5/8k[OHZF#F?":ZVJUF\s_Qr8+H<t_n!>R+7M,\TkP=ssD4!)@tQL_ZQXY.Ra+NBb^!3D`!_#cB!U%:Lt.dlD8-9AA%OsI#R\0A+)["E]+2rO#(Wn%T#-\iD"H^S#rY#+XFJ>K@kkg&RWbgb!QGfA_./?VCTTCkmA(Yh/M!tP8,UF,9C%J%KY<n9)!s/;dNGH/e97?n?;="P0fuUa0g-XS8e6a>km5MZP>kZb&B%k=;5u&nY_Zeu_c(NpZ57^9U]]R;G9s%p+EUB-+J^O+$gF#j%CUrq$3b*GA"<h'Yn$Z"1f`4LLak3>MB)3rdrA0t*Xq37^#>AtH2d(!Z(X^V<cI(T>FIoVY$N.1a)OndZ[(o"]AsA+sj")cVAJ#r(%Q;qK9A9<NM+^JMW8k2N$:R(d:mhJ9g&6[a3dA@>2.(?!F%\=cMQdN]?nfg+5ig`ksAL*O'mpu(LnM[m5h"JF8:LnR#dhc"aPL1--%ATVDpHWB?AF9C^m-s(/S0sndF1p63_(iGK^d8-$`4%Ys$Y($+#HGJ%m@*;#FW=)gid1p7")Z!G?+gfZVqT]D]P`1V78k`60$=47.%P0qh(GSrYPH6^%i<oe14p(dOYlU/qiLfO_;H5+n?FG4uX*Ng,S)95$42m>tDQ'04N<l(Z3$LBrL>Z)dG<$Zq,?:YStOO=kU`H9CA%^enWkNO(rL&F#`N=I!Y2%R'!V*aVMNisT=B^]MRHe("LW`H9WH0;]sS7@J#h.E4UuTa5,=6G/[,0IN_jRYscEjd:HHZ[+>HI3<O5%e5)?m$-S7kC2LYOY3*WYl$-'m\J*G;@Q@(R(ef"l%75U+6toiT6taT<Q;`Y$$rJBLD%J3`."%aR"P9BlhWBaO*0;:%#L(<7m*N_;%E@3\4N0;AU+?+rLV57%01D4mLP:7]3bY)u!)WYKA"4!1lj^ra'Y_0*FRfh[3jo@D>bu.cFNX_TBh5(Vpr.pM,9@k<RWHMXcfp'iV%,rZ&[aNa3Y9&`Ibc&c7q,hI'XNW`/%B:RbIgGE&:DMCe^A0#'Jgru1W9VLNZG\DqFh9!nB$$*Al6uFV$ER>281OEeH=\We25)9Gt%Q^bg7A%1AI2s5Qi<"kbK]/"C7&BRI7$:pE:*"Xb_#KTK^9ZS\0..d0n6rHl/aFTakACtM!]j%n"c(C@G3=hZ)9@//]%[CYo4q_?N%Po-<q&dp@AW,-'e&?#*WpeV+0Ym6[e@%s"\:fo#sh)CRpOoYnsj(KNq*-)f/d1#tPR'HeCc6-GDLq,iMM,_?=%SI27bAg0TWQ$\U%3[]Z]^E@S_,3+FMQ0&*?@"RHI>m)gt_9E&d@1EJ<pB@W4LHTORjK*"!odcf`E<7Ek+<=*!aVM`\VQu6HI+=J4&/r$6OTA*JacXRp%nJ:`p*ZA>%SI3Ck_m(n\<Gg[>.U'!/p(]tYbVJ\rp2<"YGdoVN\+O,P=UIn<Q5U)-eK8MCgq1TYmHLu'$*mslr([NX3ame(<[Jfn%+!C5&s/*\o>?]K_Jtj<DD`F&.DGub;*3S\5I>)8!F.$2Za%WA:"]OlUWV,.b`@QYD^"\,^OdSf$3ej,dZsmrWW"b%h"cl26c`'d_%+b,WQ9VS/2&;%gCENVhF7nCJi#$aP8aeKP(,KE,sT,:^?(?+c!"Si<3]-Y5pd<3S1I`PGi5o&sOpc51S(!%`!&<_F&AF33s7[TIF%C)/mK=\8"pmJI7[I)QD#iP?o0+msXL,@mu&;b6[#49Sein;*k`iO#3A.@@t3eQ+<jfF!182eOdMO/^sX@3/flD&?6E/C*Mt,"8_6%8CV1;2Won8R`BB'AH^pf;VuG@L4=rQl_U#TW%-n:a]Vp&/(-eb:Sl5;fnQI.l/-X9EQd-Q-br+o&Ja!!36Wr(ABR>kCkXeMfc"Ub%A+0Taa]?4L[(DC+@=`5(\#4t53#Ik&Ci]BS'DDH7LH5[V9aG)&S2;*dDigLj(1fI^6]'m)>_St_O$B.5=<pJ0OnQ_4#\]+%<>j(U%+sN@@`.:_$otjWROrY?j^mt1,G!=)/gBC\(ZJa:FNo^,!I]@A/F#:b#"$eht/4K>8?<Ci*dHjf!JG_OjPn?'3<-:a7&TMhg&;2IV%2<+GF_I?7YKNXCJ@abTE2Y%@Z&9l;;%X?qMgm/g46,a&-?NQB5'#]*#>0%=.387T`M3KQ2^WUJ93d^<t0?mb=jY8U%_uh^K,raBT%'L$&'@skln^VR;:jGc,fr#R\OdP?JB6=;N+^86UM+QG":`nl-]\q"cN"M*b0nMg*-&.%\^Wt_4Dn4[9RcQl*aEle&qfF/Ca6K75h%P=&2X\6)'a*lR/]MSLJiXNR+s*Z!LK3AUTn$TBr)U9GQoPU@B,Oa`H@"'.Ke_'ggMD[Sb](6N,nE>Bu38$XmHL6:R2JK,"_Y-a]P%Y6"n;b4%cG0pX$Y)%J$5E%TaX$fW$=eqK=TG&@PC#H)470lAl!3&p'8L<*a5R<4S@M0MabpF)<-5MQFaHs$m<92[!-D;9E@81KH"%AJQh_=WaWi'#]/]mgthd.NfRhgMYt!\)#G0SEg9-mhJuA\$EtXYL!n;RtdLFNN[?VT0smh.]s6$dMutU4P*&kQbmT/c@D$"M.`,h%VO]&fA2%%[Q1fklVQCEUZi_)R6HZi7l^T/,JS?XY1@6o<"u:DZO9J5"Q&]QgJ=Kdm4;63;iN?C^XldSWm/X+L`<?n)(@>43g>Ul'%["kPcH`_n.Z#C@9C+@nZ'iPO&DZLn_Ejq"/PT8\$>Z,IS0$qMq/?Z+HEM:k?.9I&GlC$9c#$N:RT#]=h)!<m+L8i]2Qs2^?`;&Lr%L-5R$9!=hCXkhhuKD8`krkl,<[<%/hOItO*`=,PSG!JF#f3ALeep,&7=u]0gK2Upia>a/T`$r)/6Hd3-6jc93E_^6[iH6;'.FR6q%Y*U!F&I^R]jFA,4$cr4d>Dm<()%tMq+VTcf!$6-CR)X*&$!u87=f]HS`nZfp!A"ir`&;hn6B2(L"AL'/Z)mRr0[SK9_O2$f&.pbI%F=Mqn_sp>&1W\d^&=D@5MVTfA]pU5KgLlID/p$nM,_==VgSZ`^(KQfC]:%-]7^]-D&qk(Y?$7/f81M=bLN<Jp)oYTR.n7P`_?4YH%/@13Bgkdgn+CcF,h#;!T+n(&L_$;ZX*C-1U/63W9%PB#$1OOU*CZ6Fg4Qu-m)%^RoP1d8\m:Pn`"2,@f.]\Zs-"DM:$A^79bnKK:%@[3(,.cF+]8"G"Yd]f!GE>1CpVSpO]Y?bIP,N:>1=%0+\TK_:GQ5D@=ErP/_Q6\2a`5m65.<mgP&SsZXZI1-HQ#$nmW(/OSqa!k!%&4+$`OpqZ'Qn?&_&Z;uc.r.p\2Kf4%`0hTN$mn@S8KH_47H[4,(GDXD$rna<HuYccPp?ZB&k4Q5MTSI=(XB<a8CWY%,T@/].+CV@%oe,At!;O(@1<Shl@*c&[?1Lkpfq=;^ef$ftVI6JE(kb5;)^.rBCDNse!]uciq*G?4MOg(G<6VU,%^GGJa<hLj6811lY%4M*5L0\B%/E;26[-5H>TF&Vl!Gi)[6q)^NARG]['CVZY0N):=_M,i6L)naq<[n[rntg;_K0\<e2Q6j.ja:*+Y3:3t4FIa%U[M%>3Vg%[n*g<e%Oql&"4S4T/k"OWolS)+47Gd">`YK[ch?+P7Hb^VH8('_)(HpkLE2>?.3;O,'4(i)dV`5VeQ7D`kJ4n0Sj4Z\-s1,)N$:WhS''OZK%#BseAJ\IK?'Sg/`kr[V>m13-5:4%]m>'r!^&G-[TWlXj3\KjHLoK==J^3`Q$E^*d1==/0JNnMn,<h+.$*GI\]7GaM<aHLg9eFIIO%,4G$99Jgn4SFJ24VsXQle3.3\o9IKtI((1'2pttupXA3:6AF1'dSD1_lJ0k_0^;o+Yh&MLT^PF9BqdB0G?D[@'\_%1Tb4nO'tg',%*"KVEih1+qnLV,P2ANASU_4K8';7g(c1[18D1#l0M?MZM'(h"5ef1gp'Pq.8c!^DeC(8%R!kkBN0YO7:8(t1Tq\j?JHZ>0g)b"a[%j+L_,85l\Y?A2OWmln?U``XV6EOrRaa\f1C/U&[LG:'En+rQYD[Q9)>;DD-*-Xijn,6h#&r0Bj3bnbsX]JYt,ZgPb39nbt_]tN&^%KmTQD9&r">(dBu.30j:$GV#du@C"Uk+S34@3PIG<oUTsH,K&(=LLE*HZk==P8[rr67kDiJ3>9W)R*_"L*BQ94h(#0n+l]q5`9Na-%>E>2%/pYRg_WDISU;m`i)uT/,r*o9AMTr+4cU19Nlc1b;ieD4LP36jD_dF?IV%'[`3m.NTj5Bfa^LF/;@N+QiOu6]?pJ9bf+]bH@%Km;]7?tsa1/i:$H$NcX2XE)DmK^>UJ'h9nI;CGbc+ce<0Pdq8fOf=T+Z_da\0i#CjO?S>Oori;OoU^0n#1LBWgaaQKCM-egiC'9A%Q^P?RpeqMe*'422ql>778:oY-k7e-86fpkZQBLHQ$9j[82>%:rMMjuYVdP*+90GuMJM:iW1J;.j@ZQL=R(3:>SX(3@c9KcGY$qdC%I>p[U6?tqH`>Nk"#_@U$T5t3)p3U<Vd'5Qr^C)86;7o,$/`nfViFWTp8H-3iPa_cF:/7JBa-+;TL[D>Ro>XD8.BYEK`CV?rjMF)q%rL0eRI3G<'6rnM-jB2!/6"V]?Yn;,?:"&"1VarmJeDrbn1\+4(P_b";D2XkAFr!Kk+ua]<R><of=@'shZJfS\MufoDdd2.0g9>s=%k<u+aVQkig,a56a8<4B4l\\$!oW95dIC&\b(I@iY/]r:f62G27H#-KQ]Z_u)9sYsj6P;q!DU;&6$M2]T_Q8EL]BdZXbt(Z!VCHB4%'fep$WLq>85HL'_nH3W&3G-jR_DYju!90emKm;idW+r%PnpS?36<RAhqu0uE3j@?&LLHo*oKudH(;pR;$LtuW^_B60PLYP9isN@0%(If9DjC0Boeb3Zm+b*rt*Jjk6K(R:iAUf.VIZ(1rDq(l`XUm.7/'Jo5R"77r&.@&5R+VCBnXC?M37C0)[9:dSjMc$pDJriYS&pTG%@dSt-07FiMcAqK=ILct"ESN=9N%[/?^`Ti@+?[W54JnIc]c2X'iV'WO/F#uE=-"#<nt_u0*!lZ^>Wp^mNr:)U+oQ"%$"r!In'VbR%*JT137t;TBj<BYR+2E.S8ki1C&6rM^?<Z'\8u?^eo`K^I)@+k)KmD8\nQ)iXmg%Y*19k7jbE2"Rp\o],@U'V$I`fp7df^BEh*9D(%W/:&Fk1r7V=&Q.UB.8!JL_+Oqq@!o?DO@4t"?[fuJ-X.-E7h<Qd_\q%3:,=f=%C%6@r!h[!Y38I.T>IC"/D*^Ij!YM$NrS"Ne#$L%R@Qc0BndjX?5&p`GqdAJrD4tTi<&sIYUFkA.Jcc+[157o*KWP$&K8IMR\J^+cg7b%9YWslN\nY+OpS$1i.\?_m@Gd>,3#C#-K"n2%"PdLE)YhEh`<$&nEZ5;B#rq&t%E=R)*TZHD1,+Rq)!Em_MF'+MI_u8i8<s!=+b>(IbgC@=18gDCNjCf0>H8M;`d1-E;gJ(jZ=XoH%hdP/gIYYTNk]aih&#qn0OiBL>b'Ys,j9GR;Q&I(FS@6j:'bNBqE#5Qq`D$DccZ&=SP1eVHe-ZH$KUkuNqMeq`^bT'Vm/p9"RlitR%f^Oj$f23j$Q46-)c"#<S5[/q8jsBk7dEjiQg&_5A6fA3L,l!/QW6;1\.ZABJJOa1K1O1qr0X$;!\IGY7oFSEDfM_)J)./LB$KH#i%Q,r&bOLqeu4b6Rq,ZA.&Drm>kQs/rQ_qkWSc=PtY02uF5_bq_-Y%7N23]M.TF-RV5KXp0*f\-\!P!']$g<&c%%dE&b+H1UpPDVG.%"]pL]_#kIu2_slDT!/tY.,Y-3qD[$.0L=IU%+#t@*n5+QKB;Ct(J23=9O5lC.Il-$LD1%]\nB;QfnLpVa1n[^n"EkpCbCWC#s;/R%Se+rT@cD,d!p33r)>iA0Dh1:3A?/X4*KSB#Z]ukNI7Vmq3_"#qc.RERh?"K)B7X!;4_lIIc#u=dr_aTA^.[HZ$MLKtEiILP%<,`h%_#P:U0XY>hg9@FT:A)UGi%hH.Q7LsVEAm8j%#\qP;i!BJ"jENa[,c0'fXQ\)`H%]d!KP?(F+r68'TRM]#8<V2=Drdi1ZD,JBWK:W%9#W,:+N-*W4dtN#%s?Y.Hed)tAt'";m;+@AM#Val":TRW%@]&5P9"j<$F+/EV'N%Z^sUh6^6Cj&=?1%-^6bW,^1'X3m%9W[!aaQQ%A#X2P"Y^.a6-(d`Q/F`",g:5EF6Woj'aG/>8L-[3_iW6JjL1#sDe)3Sa$8L^$7*Cgiq:Vd7)LgcXf\+4S__4R9je9j85*jZoIi)T%;0!&M;a@Pt,=Fk,%cWkN`<Fs3Lm,U3F5S.?on:NCTp*>(/:^LLFGg'[_U[7u-.POOi_g-YfF#3K+esN5e\M,/[:+&#`R0bg4LK1,%E(Ism.Sgas3kmP,2Ga\ALi#Nn-T0i1G<F06dh<jk*][Mc.kuVInF3Y\#]eo@0"f&1Z.qI8,q4f^1NVUY0),e%+br/]f%@l--oD.q%O's6X:(9<$WN<P7E[_AJP7b.'"M*ql`8_BNI5?Zt2Xp3t)\F-]U]nBfm7mu&TVInZCnHn[ZYM`3"(mB(`?j*#n]J->H4>^IREg=o%I/AgG[9U]TPKO]cO>C1TW>m*:3u*[8i@32O;)t3[OL>,Z;k+j1)$Mds]E])>K_Wl`L,d^X%D\Y<@&.[d,)+XFCp):Y`*H'.UilrY%C4_fn2`^JPDD)p,&$\H?XX)Hr'F"VsF,Nk3=ELABLNH`%""bY#6K502Sq35g<9Z*bSjEdp23]<6(+X6qAkp'>focLFJu7JjQq=Kl%'Ytq?k;Q:HJg7&c+fWfL`i9'JWQA?[9B6]p-%WUE2cdjBS3]7PIL2f$,[po0R?/.%-dDp:70D[X>QRb#$:U\0_-[Tsd#6A)4(L<g%'XWY*$L]4e;B1;?+>#jE$;VDfT-Zc0Y=b+UW%;@/X3rSg4V\aeD`K71q)F^nJp<32+UE`\d?nL&QjU`15I-<`kcr(m3s7]!D75Yt%'SN10hBsKnJO0^2CZZop]7j)L.'NChZ0nnZ//T-sL:Dur)AG2$je.H_K%n2`]WPKB$."lmPZ<>biI7?D%hG(lO2F6#pX2T4!fo2X%0?1Jo%`8ifhZ'i<81K:A853eG6EgSOqcQ*)>!fVpA0Kn"EUJ+-*6s6Y(S5Y/*`X<p&Za1WfU`NcoU,(^1kMIQoB,h:`&+fgaP?bZ%d23MjA<K?oON]WV"<nU1@qS>T-K03gq.9J&LsKNr'pkfU'4i_,&U-jDeq$)(_s_ZBPm!>[@>`t=GM=hD+qoM3:/-,Y&HDn3_g1ZQ%&-0a.>b?TgUXO`a<Jf.A,5Vplf\.<"8R[QI&ncb%R-MDX</2L'9YO7dNpu($fGFG1S8aqjR.#m:;'L['6>oS;Loefh/-\9YC^bJr%(i0;bh3OR80-G6\_WKgI_SGRHGq*Gg,tX$-qY45pE%N+J.oIh1S_?ne:dR-b!3(o/L*JgpEi,;@dCCkc@SJh;PUkR+8n"'&%o<N]%Mp#60QkMrh<,/Uk7=o#D"<g.7,i!;NUK/3,kLo)P0HN,6@)0k$PXsl=a.-N^Z!@\.DPf\g?c>uafkDm>6o*)<39DcmEhREAYQE9d%.U.iZ6B[i<EpT>VC,p+feh`YfPp0`C6VKK%(%*4Wf>mSU63JK.m7MV^7OI6GX30]?_V@s[N!kfY8X?(O;(U.k'Lf!+VF-#L)1IPY%]G6B)M's@bhp:7gcokeH^g(l97;Nfa&5btI%O*['JjCnPra<r_?DM9Hb0^6u0*Jg+Y&Q!uph+PQBLLKcWBZmi<+<:I@>7O>%_55L%)B]/$^l;RXC06hlfY5?LY/e*!Yon)O!*>)aP"bV(;2PND3lKh6a2!fbS6O#sK/?Z?<Bg1E2BXhb>e*eMDZgG9:4gR8WZ@"75["W'%j6%'3*0]gO'$dm;`7?+Fm#ps?EHhgLnWB!=_n;Y>F!Z:T*`N%.oB`^AQFYVPK9^7eV+l#ZAA1!A(l(bh<91E#Km7H<@9/jm\XZZa%"`50'caf^:d\aQKFj/@WC=?E33_??E9lmg=Q.<6UKm@Mr@".5N=!Y_Ik`chC>\hfY9:deDgbVLSc:JqE2N<`<d!&<`3JVsQ"^Tga%?BrM5E,k<=8i'H#,K\+FR^P;Cr_RS<iino7du'pOrA2OfDd-XM3Zp_R%[brnIYQR\TLs8*&=7uhW\i$7C,Do<dG-nA]b>H2_MD9i%H(5k!ku;AgYc(I"ZpMDTXY?eJVbX/^N!\D%F],4r06EX"r=jkS@M<it20,ln/'R>->hU0L^?;h-28-A?+kEKFa4q(S6TTt3W6mj5%PK&oQ3>r_g:BOO#"I5gXJM<\9M?KfE<>*3H6"Fd=S_-/*fm=`8!^38KTZ>OdJOQ2`gY+>M!X%RU+?S8D9G'5=i:<_;,(V2qWN#Mg%$+.KQ*FqAdM?J6!De:rQM?FD`]oHQRl7:,VP1qqe%Y4]KCWIurqs)-uSEMe?-.[L)T4)3]MQ(L2FBg_Yi\@6[UU.l,,'FkfBuP,7%[\14kT];`.W]B#(1<a]6a1IM'dg=nYG\CGM>[s6f'Ag+KED('e&g,K)rB7"^m68r"\MoRR>195q/0i0?9@[$Q9+pYGd(Y,(LPc;:%59=]:IAfENUneENmKnZ?n0C($Tcd7(%jXXEas"%]OpTf.Lp_g:4(!/3_7Ie:,Is)Km.!QA_Ha@!&oM$02*g4\F@6[Bj(%,T(OM+a%A1Jq7q3t#]j,9bY8ua/PR6ZEeMsY9g^65b^[Z4iMMTM1sV2U*+2<'_K*%;mQ@u2gnfq=pDA[PYV__GQ%_X%kk,8*)JJ'-":q[%mp%LV^ol\#hQ!DoCQn)cY$kmY3R_*6H.L7)Ql!=#U787+QSa15E*:'8bgj<m_Pj,r#P5TQ=!7='&(J[O>(j<kn,4/k&]!Umr[GD^\.?%\YM_K_5?TD)C_kdYYoi[JRko]/;MIYpUe888iRVg2.<_2mVe]]Qc?#):)FC1&-`7!KL#_AE<)mQ#"bk(#;@G3ii5(t;^Df<h.+'a%QN^7)\uJ>R%LI0K76L0,Oqm[UEq9^QeVdkA(:a)S/#%Fr\gI_-GUX33ij,jB#*stfJF)A_Ns%bQKIMe$%5.tg@_W:(#_pptO[a:[%<>,Kq!DB9a5#cm6K/l6E,>&O>R%e_HMM;]h"QJ.-h(ZJQLe2(I6J)g.9qt('kaPRH#/h)+?cpQBR&h]9,+o0m"R%!V!1(^8=JSQr%6WdB_&II;d35)kP$6_VbNHbKNNB)fE%LKuoS3,AkcjP?-qhP7;KYO4s2NAQ>rA?J#L\f\$<7VakKfS,<E1ubl.DTcmO/!iN_&=kj%'>IIR%^$G@k[T&%,1B,5!=@1]^r!fn)mro0+Y606$FA/&&94akEZM_d/>K'B@t8T&*1i%ij17=f@:"QX(GNOXh)m1t4uE#"Kg2-/%k*MCs&"^90["!.7iPr"dmIo.mqsXQ3oQ,G/DIMM?qbK^XI_PjFpupnrVpkD?3LYHtp$9(omsc@+Vn^H*qK[2ZleBa\q:![IrXT:J%iZ;H/fY5*Vp\t?<7p4d~>%AI9_PrivateDataEnd